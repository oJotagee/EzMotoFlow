// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String    @id @default(cuid())
  name       String
  password   String
  email      String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
}

model MotorCycle {
  id           String           @id @default(cuid())
  nome         String
  cor          String
  placa        String           @unique
  ano          DateTime
  chassi       String           @unique
  renavam      String           @unique
  km           String
  valor_compra Int
  valor_venda  Int
  valor_fipe   Int
  observacao   String?
  foto1        String?
  foto2        String?
  foto3        String?
  status       StatusMotorcycle @default(ativo)
  created_at   DateTime?        @default(now())
  updated_at   DateTime?        @default(now())

  Contracts Contracts[]
}

model Clients {
  id             String      @id @default(cuid())
  tipo           TipoCliente
  fullName       String
  documento      String      @unique
  telefone       String?
  email          String      @unique
  dataNascimento DateTime?
  companyName    String?

  cep          String
  rua          String
  numero       String
  bairro       String
  cidade       String
  estado       String
  complementos String?

  status     StatusClient @default(ativo)
  created_at DateTime?    @default(now())
  updated_at DateTime?    @default(now())

  Contracts Contracts[]
}

model Contracts {
  id           String         @id @default(cuid())
  valor        Int
  data         DateTime       @default(now())
  status       StatusContrato @default(ativo)
  observacao   String?
  pagamento    Pagamento
  contractoPdf String?
  created_at   DateTime?      @default(now())
  updated_at   DateTime?      @default(now())

  motorcycleId String
  motorcycle   MotorCycle @relation(fields: [motorcycleId], references: [id], onDelete: Cascade)

  clientId String
  client   Clients @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum StatusMotorcycle {
  ativo
  inativo
  vendido
  andamento
}

enum TipoCliente {
  PESSOA_FISICA
  PESSOA_JURIDICA
}

enum StatusClient {
  ativo
  inativo
}

enum Pagamento {
  boleto
  cartao
  pix
}

enum StatusContrato {
  ativo
  cancelado
  finalizado
}

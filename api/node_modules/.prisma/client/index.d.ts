
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model MotorCycle
 * 
 */
export type MotorCycle = $Result.DefaultSelection<Prisma.$MotorCyclePayload>
/**
 * Model Clients
 * 
 */
export type Clients = $Result.DefaultSelection<Prisma.$ClientsPayload>
/**
 * Model Contracts
 * 
 */
export type Contracts = $Result.DefaultSelection<Prisma.$ContractsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StatusMotorcycle: {
  ativo: 'ativo',
  inativo: 'inativo',
  vendido: 'vendido',
  andamento: 'andamento'
};

export type StatusMotorcycle = (typeof StatusMotorcycle)[keyof typeof StatusMotorcycle]


export const TipoCliente: {
  PESSOA_FISICA: 'PESSOA_FISICA',
  PESSOA_JURIDICA: 'PESSOA_JURIDICA'
};

export type TipoCliente = (typeof TipoCliente)[keyof typeof TipoCliente]


export const StatusClient: {
  ativo: 'ativo',
  inativo: 'inativo'
};

export type StatusClient = (typeof StatusClient)[keyof typeof StatusClient]


export const Pagamento: {
  boleto: 'boleto',
  cartao: 'cartao',
  pix: 'pix'
};

export type Pagamento = (typeof Pagamento)[keyof typeof Pagamento]


export const StatusContrato: {
  ativo: 'ativo',
  cancelado: 'cancelado',
  finalizado: 'finalizado'
};

export type StatusContrato = (typeof StatusContrato)[keyof typeof StatusContrato]

}

export type StatusMotorcycle = $Enums.StatusMotorcycle

export const StatusMotorcycle: typeof $Enums.StatusMotorcycle

export type TipoCliente = $Enums.TipoCliente

export const TipoCliente: typeof $Enums.TipoCliente

export type StatusClient = $Enums.StatusClient

export const StatusClient: typeof $Enums.StatusClient

export type Pagamento = $Enums.Pagamento

export const Pagamento: typeof $Enums.Pagamento

export type StatusContrato = $Enums.StatusContrato

export const StatusContrato: typeof $Enums.StatusContrato

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.motorCycle`: Exposes CRUD operations for the **MotorCycle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MotorCycles
    * const motorCycles = await prisma.motorCycle.findMany()
    * ```
    */
  get motorCycle(): Prisma.MotorCycleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clients`: Exposes CRUD operations for the **Clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.ClientsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contracts`: Exposes CRUD operations for the **Contracts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contracts.findMany()
    * ```
    */
  get contracts(): Prisma.ContractsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    MotorCycle: 'MotorCycle',
    Clients: 'Clients',
    Contracts: 'Contracts'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "motorCycle" | "clients" | "contracts"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      MotorCycle: {
        payload: Prisma.$MotorCyclePayload<ExtArgs>
        fields: Prisma.MotorCycleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MotorCycleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MotorCycleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>
          }
          findFirst: {
            args: Prisma.MotorCycleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MotorCycleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>
          }
          findMany: {
            args: Prisma.MotorCycleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>[]
          }
          create: {
            args: Prisma.MotorCycleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>
          }
          createMany: {
            args: Prisma.MotorCycleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MotorCycleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>[]
          }
          delete: {
            args: Prisma.MotorCycleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>
          }
          update: {
            args: Prisma.MotorCycleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>
          }
          deleteMany: {
            args: Prisma.MotorCycleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MotorCycleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MotorCycleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>[]
          }
          upsert: {
            args: Prisma.MotorCycleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotorCyclePayload>
          }
          aggregate: {
            args: Prisma.MotorCycleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMotorCycle>
          }
          groupBy: {
            args: Prisma.MotorCycleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MotorCycleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MotorCycleCountArgs<ExtArgs>
            result: $Utils.Optional<MotorCycleCountAggregateOutputType> | number
          }
        }
      }
      Clients: {
        payload: Prisma.$ClientsPayload<ExtArgs>
        fields: Prisma.ClientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          findFirst: {
            args: Prisma.ClientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          findMany: {
            args: Prisma.ClientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>[]
          }
          create: {
            args: Prisma.ClientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          createMany: {
            args: Prisma.ClientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>[]
          }
          delete: {
            args: Prisma.ClientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          update: {
            args: Prisma.ClientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          deleteMany: {
            args: Prisma.ClientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>[]
          }
          upsert: {
            args: Prisma.ClientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          aggregate: {
            args: Prisma.ClientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClients>
          }
          groupBy: {
            args: Prisma.ClientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientsCountArgs<ExtArgs>
            result: $Utils.Optional<ClientsCountAggregateOutputType> | number
          }
        }
      }
      Contracts: {
        payload: Prisma.$ContractsPayload<ExtArgs>
        fields: Prisma.ContractsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>
          }
          findFirst: {
            args: Prisma.ContractsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>
          }
          findMany: {
            args: Prisma.ContractsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>[]
          }
          create: {
            args: Prisma.ContractsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>
          }
          createMany: {
            args: Prisma.ContractsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>[]
          }
          delete: {
            args: Prisma.ContractsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>
          }
          update: {
            args: Prisma.ContractsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>
          }
          deleteMany: {
            args: Prisma.ContractsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>[]
          }
          upsert: {
            args: Prisma.ContractsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractsPayload>
          }
          aggregate: {
            args: Prisma.ContractsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContracts>
          }
          groupBy: {
            args: Prisma.ContractsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractsCountArgs<ExtArgs>
            result: $Utils.Optional<ContractsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: UsersOmit
    motorCycle?: MotorCycleOmit
    clients?: ClientsOmit
    contracts?: ContractsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MotorCycleCountOutputType
   */

  export type MotorCycleCountOutputType = {
    Contracts: number
  }

  export type MotorCycleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Contracts?: boolean | MotorCycleCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * MotorCycleCountOutputType without action
   */
  export type MotorCycleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycleCountOutputType
     */
    select?: MotorCycleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MotorCycleCountOutputType without action
   */
  export type MotorCycleCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractsWhereInput
  }


  /**
   * Count Type ClientsCountOutputType
   */

  export type ClientsCountOutputType = {
    Contracts: number
  }

  export type ClientsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Contracts?: boolean | ClientsCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientsCountOutputType
     */
    select?: ClientsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    name: string | null
    password: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    password: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    name: string
    password: string
    email: string
    created_at: Date | null
    updated_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "password" | "email" | "created_at" | "updated_at", ExtArgs["result"]["users"]>

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      password: string
      email: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UsersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsersUpdateManyAndReturnArgs>(args: SelectSubset<T, UsersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly name: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly created_at: FieldRef<"Users", 'DateTime'>
    readonly updated_at: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users updateManyAndReturn
   */
  export type UsersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
  }


  /**
   * Model MotorCycle
   */

  export type AggregateMotorCycle = {
    _count: MotorCycleCountAggregateOutputType | null
    _avg: MotorCycleAvgAggregateOutputType | null
    _sum: MotorCycleSumAggregateOutputType | null
    _min: MotorCycleMinAggregateOutputType | null
    _max: MotorCycleMaxAggregateOutputType | null
  }

  export type MotorCycleAvgAggregateOutputType = {
    valor_compra: number | null
    valor_venda: number | null
    valor_fipe: number | null
  }

  export type MotorCycleSumAggregateOutputType = {
    valor_compra: number | null
    valor_venda: number | null
    valor_fipe: number | null
  }

  export type MotorCycleMinAggregateOutputType = {
    id: string | null
    nome: string | null
    cor: string | null
    placa: string | null
    ano: Date | null
    chassi: string | null
    renavam: string | null
    km: string | null
    valor_compra: number | null
    valor_venda: number | null
    valor_fipe: number | null
    observacao: string | null
    foto1: string | null
    foto2: string | null
    foto3: string | null
    status: $Enums.StatusMotorcycle | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MotorCycleMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    cor: string | null
    placa: string | null
    ano: Date | null
    chassi: string | null
    renavam: string | null
    km: string | null
    valor_compra: number | null
    valor_venda: number | null
    valor_fipe: number | null
    observacao: string | null
    foto1: string | null
    foto2: string | null
    foto3: string | null
    status: $Enums.StatusMotorcycle | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MotorCycleCountAggregateOutputType = {
    id: number
    nome: number
    cor: number
    placa: number
    ano: number
    chassi: number
    renavam: number
    km: number
    valor_compra: number
    valor_venda: number
    valor_fipe: number
    observacao: number
    foto1: number
    foto2: number
    foto3: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type MotorCycleAvgAggregateInputType = {
    valor_compra?: true
    valor_venda?: true
    valor_fipe?: true
  }

  export type MotorCycleSumAggregateInputType = {
    valor_compra?: true
    valor_venda?: true
    valor_fipe?: true
  }

  export type MotorCycleMinAggregateInputType = {
    id?: true
    nome?: true
    cor?: true
    placa?: true
    ano?: true
    chassi?: true
    renavam?: true
    km?: true
    valor_compra?: true
    valor_venda?: true
    valor_fipe?: true
    observacao?: true
    foto1?: true
    foto2?: true
    foto3?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type MotorCycleMaxAggregateInputType = {
    id?: true
    nome?: true
    cor?: true
    placa?: true
    ano?: true
    chassi?: true
    renavam?: true
    km?: true
    valor_compra?: true
    valor_venda?: true
    valor_fipe?: true
    observacao?: true
    foto1?: true
    foto2?: true
    foto3?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type MotorCycleCountAggregateInputType = {
    id?: true
    nome?: true
    cor?: true
    placa?: true
    ano?: true
    chassi?: true
    renavam?: true
    km?: true
    valor_compra?: true
    valor_venda?: true
    valor_fipe?: true
    observacao?: true
    foto1?: true
    foto2?: true
    foto3?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type MotorCycleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MotorCycle to aggregate.
     */
    where?: MotorCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MotorCycles to fetch.
     */
    orderBy?: MotorCycleOrderByWithRelationInput | MotorCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MotorCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MotorCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MotorCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MotorCycles
    **/
    _count?: true | MotorCycleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MotorCycleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MotorCycleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MotorCycleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MotorCycleMaxAggregateInputType
  }

  export type GetMotorCycleAggregateType<T extends MotorCycleAggregateArgs> = {
        [P in keyof T & keyof AggregateMotorCycle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMotorCycle[P]>
      : GetScalarType<T[P], AggregateMotorCycle[P]>
  }




  export type MotorCycleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MotorCycleWhereInput
    orderBy?: MotorCycleOrderByWithAggregationInput | MotorCycleOrderByWithAggregationInput[]
    by: MotorCycleScalarFieldEnum[] | MotorCycleScalarFieldEnum
    having?: MotorCycleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MotorCycleCountAggregateInputType | true
    _avg?: MotorCycleAvgAggregateInputType
    _sum?: MotorCycleSumAggregateInputType
    _min?: MotorCycleMinAggregateInputType
    _max?: MotorCycleMaxAggregateInputType
  }

  export type MotorCycleGroupByOutputType = {
    id: string
    nome: string
    cor: string
    placa: string
    ano: Date
    chassi: string
    renavam: string
    km: string
    valor_compra: number
    valor_venda: number
    valor_fipe: number
    observacao: string | null
    foto1: string | null
    foto2: string | null
    foto3: string | null
    status: $Enums.StatusMotorcycle
    created_at: Date | null
    updated_at: Date | null
    _count: MotorCycleCountAggregateOutputType | null
    _avg: MotorCycleAvgAggregateOutputType | null
    _sum: MotorCycleSumAggregateOutputType | null
    _min: MotorCycleMinAggregateOutputType | null
    _max: MotorCycleMaxAggregateOutputType | null
  }

  type GetMotorCycleGroupByPayload<T extends MotorCycleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MotorCycleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MotorCycleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MotorCycleGroupByOutputType[P]>
            : GetScalarType<T[P], MotorCycleGroupByOutputType[P]>
        }
      >
    >


  export type MotorCycleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor?: boolean
    placa?: boolean
    ano?: boolean
    chassi?: boolean
    renavam?: boolean
    km?: boolean
    valor_compra?: boolean
    valor_venda?: boolean
    valor_fipe?: boolean
    observacao?: boolean
    foto1?: boolean
    foto2?: boolean
    foto3?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    Contracts?: boolean | MotorCycle$ContractsArgs<ExtArgs>
    _count?: boolean | MotorCycleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["motorCycle"]>

  export type MotorCycleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor?: boolean
    placa?: boolean
    ano?: boolean
    chassi?: boolean
    renavam?: boolean
    km?: boolean
    valor_compra?: boolean
    valor_venda?: boolean
    valor_fipe?: boolean
    observacao?: boolean
    foto1?: boolean
    foto2?: boolean
    foto3?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["motorCycle"]>

  export type MotorCycleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    cor?: boolean
    placa?: boolean
    ano?: boolean
    chassi?: boolean
    renavam?: boolean
    km?: boolean
    valor_compra?: boolean
    valor_venda?: boolean
    valor_fipe?: boolean
    observacao?: boolean
    foto1?: boolean
    foto2?: boolean
    foto3?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["motorCycle"]>

  export type MotorCycleSelectScalar = {
    id?: boolean
    nome?: boolean
    cor?: boolean
    placa?: boolean
    ano?: boolean
    chassi?: boolean
    renavam?: boolean
    km?: boolean
    valor_compra?: boolean
    valor_venda?: boolean
    valor_fipe?: boolean
    observacao?: boolean
    foto1?: boolean
    foto2?: boolean
    foto3?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type MotorCycleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "cor" | "placa" | "ano" | "chassi" | "renavam" | "km" | "valor_compra" | "valor_venda" | "valor_fipe" | "observacao" | "foto1" | "foto2" | "foto3" | "status" | "created_at" | "updated_at", ExtArgs["result"]["motorCycle"]>
  export type MotorCycleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Contracts?: boolean | MotorCycle$ContractsArgs<ExtArgs>
    _count?: boolean | MotorCycleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MotorCycleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MotorCycleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MotorCyclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MotorCycle"
    objects: {
      Contracts: Prisma.$ContractsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      cor: string
      placa: string
      ano: Date
      chassi: string
      renavam: string
      km: string
      valor_compra: number
      valor_venda: number
      valor_fipe: number
      observacao: string | null
      foto1: string | null
      foto2: string | null
      foto3: string | null
      status: $Enums.StatusMotorcycle
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["motorCycle"]>
    composites: {}
  }

  type MotorCycleGetPayload<S extends boolean | null | undefined | MotorCycleDefaultArgs> = $Result.GetResult<Prisma.$MotorCyclePayload, S>

  type MotorCycleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MotorCycleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MotorCycleCountAggregateInputType | true
    }

  export interface MotorCycleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MotorCycle'], meta: { name: 'MotorCycle' } }
    /**
     * Find zero or one MotorCycle that matches the filter.
     * @param {MotorCycleFindUniqueArgs} args - Arguments to find a MotorCycle
     * @example
     * // Get one MotorCycle
     * const motorCycle = await prisma.motorCycle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MotorCycleFindUniqueArgs>(args: SelectSubset<T, MotorCycleFindUniqueArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MotorCycle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MotorCycleFindUniqueOrThrowArgs} args - Arguments to find a MotorCycle
     * @example
     * // Get one MotorCycle
     * const motorCycle = await prisma.motorCycle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MotorCycleFindUniqueOrThrowArgs>(args: SelectSubset<T, MotorCycleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MotorCycle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotorCycleFindFirstArgs} args - Arguments to find a MotorCycle
     * @example
     * // Get one MotorCycle
     * const motorCycle = await prisma.motorCycle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MotorCycleFindFirstArgs>(args?: SelectSubset<T, MotorCycleFindFirstArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MotorCycle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotorCycleFindFirstOrThrowArgs} args - Arguments to find a MotorCycle
     * @example
     * // Get one MotorCycle
     * const motorCycle = await prisma.motorCycle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MotorCycleFindFirstOrThrowArgs>(args?: SelectSubset<T, MotorCycleFindFirstOrThrowArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MotorCycles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotorCycleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MotorCycles
     * const motorCycles = await prisma.motorCycle.findMany()
     * 
     * // Get first 10 MotorCycles
     * const motorCycles = await prisma.motorCycle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const motorCycleWithIdOnly = await prisma.motorCycle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MotorCycleFindManyArgs>(args?: SelectSubset<T, MotorCycleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MotorCycle.
     * @param {MotorCycleCreateArgs} args - Arguments to create a MotorCycle.
     * @example
     * // Create one MotorCycle
     * const MotorCycle = await prisma.motorCycle.create({
     *   data: {
     *     // ... data to create a MotorCycle
     *   }
     * })
     * 
     */
    create<T extends MotorCycleCreateArgs>(args: SelectSubset<T, MotorCycleCreateArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MotorCycles.
     * @param {MotorCycleCreateManyArgs} args - Arguments to create many MotorCycles.
     * @example
     * // Create many MotorCycles
     * const motorCycle = await prisma.motorCycle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MotorCycleCreateManyArgs>(args?: SelectSubset<T, MotorCycleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MotorCycles and returns the data saved in the database.
     * @param {MotorCycleCreateManyAndReturnArgs} args - Arguments to create many MotorCycles.
     * @example
     * // Create many MotorCycles
     * const motorCycle = await prisma.motorCycle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MotorCycles and only return the `id`
     * const motorCycleWithIdOnly = await prisma.motorCycle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MotorCycleCreateManyAndReturnArgs>(args?: SelectSubset<T, MotorCycleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MotorCycle.
     * @param {MotorCycleDeleteArgs} args - Arguments to delete one MotorCycle.
     * @example
     * // Delete one MotorCycle
     * const MotorCycle = await prisma.motorCycle.delete({
     *   where: {
     *     // ... filter to delete one MotorCycle
     *   }
     * })
     * 
     */
    delete<T extends MotorCycleDeleteArgs>(args: SelectSubset<T, MotorCycleDeleteArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MotorCycle.
     * @param {MotorCycleUpdateArgs} args - Arguments to update one MotorCycle.
     * @example
     * // Update one MotorCycle
     * const motorCycle = await prisma.motorCycle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MotorCycleUpdateArgs>(args: SelectSubset<T, MotorCycleUpdateArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MotorCycles.
     * @param {MotorCycleDeleteManyArgs} args - Arguments to filter MotorCycles to delete.
     * @example
     * // Delete a few MotorCycles
     * const { count } = await prisma.motorCycle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MotorCycleDeleteManyArgs>(args?: SelectSubset<T, MotorCycleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MotorCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotorCycleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MotorCycles
     * const motorCycle = await prisma.motorCycle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MotorCycleUpdateManyArgs>(args: SelectSubset<T, MotorCycleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MotorCycles and returns the data updated in the database.
     * @param {MotorCycleUpdateManyAndReturnArgs} args - Arguments to update many MotorCycles.
     * @example
     * // Update many MotorCycles
     * const motorCycle = await prisma.motorCycle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MotorCycles and only return the `id`
     * const motorCycleWithIdOnly = await prisma.motorCycle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MotorCycleUpdateManyAndReturnArgs>(args: SelectSubset<T, MotorCycleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MotorCycle.
     * @param {MotorCycleUpsertArgs} args - Arguments to update or create a MotorCycle.
     * @example
     * // Update or create a MotorCycle
     * const motorCycle = await prisma.motorCycle.upsert({
     *   create: {
     *     // ... data to create a MotorCycle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MotorCycle we want to update
     *   }
     * })
     */
    upsert<T extends MotorCycleUpsertArgs>(args: SelectSubset<T, MotorCycleUpsertArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MotorCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotorCycleCountArgs} args - Arguments to filter MotorCycles to count.
     * @example
     * // Count the number of MotorCycles
     * const count = await prisma.motorCycle.count({
     *   where: {
     *     // ... the filter for the MotorCycles we want to count
     *   }
     * })
    **/
    count<T extends MotorCycleCountArgs>(
      args?: Subset<T, MotorCycleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MotorCycleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MotorCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotorCycleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MotorCycleAggregateArgs>(args: Subset<T, MotorCycleAggregateArgs>): Prisma.PrismaPromise<GetMotorCycleAggregateType<T>>

    /**
     * Group by MotorCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotorCycleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MotorCycleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MotorCycleGroupByArgs['orderBy'] }
        : { orderBy?: MotorCycleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MotorCycleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMotorCycleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MotorCycle model
   */
  readonly fields: MotorCycleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MotorCycle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MotorCycleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Contracts<T extends MotorCycle$ContractsArgs<ExtArgs> = {}>(args?: Subset<T, MotorCycle$ContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MotorCycle model
   */
  interface MotorCycleFieldRefs {
    readonly id: FieldRef<"MotorCycle", 'String'>
    readonly nome: FieldRef<"MotorCycle", 'String'>
    readonly cor: FieldRef<"MotorCycle", 'String'>
    readonly placa: FieldRef<"MotorCycle", 'String'>
    readonly ano: FieldRef<"MotorCycle", 'DateTime'>
    readonly chassi: FieldRef<"MotorCycle", 'String'>
    readonly renavam: FieldRef<"MotorCycle", 'String'>
    readonly km: FieldRef<"MotorCycle", 'String'>
    readonly valor_compra: FieldRef<"MotorCycle", 'Int'>
    readonly valor_venda: FieldRef<"MotorCycle", 'Int'>
    readonly valor_fipe: FieldRef<"MotorCycle", 'Int'>
    readonly observacao: FieldRef<"MotorCycle", 'String'>
    readonly foto1: FieldRef<"MotorCycle", 'String'>
    readonly foto2: FieldRef<"MotorCycle", 'String'>
    readonly foto3: FieldRef<"MotorCycle", 'String'>
    readonly status: FieldRef<"MotorCycle", 'StatusMotorcycle'>
    readonly created_at: FieldRef<"MotorCycle", 'DateTime'>
    readonly updated_at: FieldRef<"MotorCycle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MotorCycle findUnique
   */
  export type MotorCycleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * Filter, which MotorCycle to fetch.
     */
    where: MotorCycleWhereUniqueInput
  }

  /**
   * MotorCycle findUniqueOrThrow
   */
  export type MotorCycleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * Filter, which MotorCycle to fetch.
     */
    where: MotorCycleWhereUniqueInput
  }

  /**
   * MotorCycle findFirst
   */
  export type MotorCycleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * Filter, which MotorCycle to fetch.
     */
    where?: MotorCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MotorCycles to fetch.
     */
    orderBy?: MotorCycleOrderByWithRelationInput | MotorCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MotorCycles.
     */
    cursor?: MotorCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MotorCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MotorCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MotorCycles.
     */
    distinct?: MotorCycleScalarFieldEnum | MotorCycleScalarFieldEnum[]
  }

  /**
   * MotorCycle findFirstOrThrow
   */
  export type MotorCycleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * Filter, which MotorCycle to fetch.
     */
    where?: MotorCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MotorCycles to fetch.
     */
    orderBy?: MotorCycleOrderByWithRelationInput | MotorCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MotorCycles.
     */
    cursor?: MotorCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MotorCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MotorCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MotorCycles.
     */
    distinct?: MotorCycleScalarFieldEnum | MotorCycleScalarFieldEnum[]
  }

  /**
   * MotorCycle findMany
   */
  export type MotorCycleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * Filter, which MotorCycles to fetch.
     */
    where?: MotorCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MotorCycles to fetch.
     */
    orderBy?: MotorCycleOrderByWithRelationInput | MotorCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MotorCycles.
     */
    cursor?: MotorCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MotorCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MotorCycles.
     */
    skip?: number
    distinct?: MotorCycleScalarFieldEnum | MotorCycleScalarFieldEnum[]
  }

  /**
   * MotorCycle create
   */
  export type MotorCycleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * The data needed to create a MotorCycle.
     */
    data: XOR<MotorCycleCreateInput, MotorCycleUncheckedCreateInput>
  }

  /**
   * MotorCycle createMany
   */
  export type MotorCycleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MotorCycles.
     */
    data: MotorCycleCreateManyInput | MotorCycleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MotorCycle createManyAndReturn
   */
  export type MotorCycleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * The data used to create many MotorCycles.
     */
    data: MotorCycleCreateManyInput | MotorCycleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MotorCycle update
   */
  export type MotorCycleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * The data needed to update a MotorCycle.
     */
    data: XOR<MotorCycleUpdateInput, MotorCycleUncheckedUpdateInput>
    /**
     * Choose, which MotorCycle to update.
     */
    where: MotorCycleWhereUniqueInput
  }

  /**
   * MotorCycle updateMany
   */
  export type MotorCycleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MotorCycles.
     */
    data: XOR<MotorCycleUpdateManyMutationInput, MotorCycleUncheckedUpdateManyInput>
    /**
     * Filter which MotorCycles to update
     */
    where?: MotorCycleWhereInput
    /**
     * Limit how many MotorCycles to update.
     */
    limit?: number
  }

  /**
   * MotorCycle updateManyAndReturn
   */
  export type MotorCycleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * The data used to update MotorCycles.
     */
    data: XOR<MotorCycleUpdateManyMutationInput, MotorCycleUncheckedUpdateManyInput>
    /**
     * Filter which MotorCycles to update
     */
    where?: MotorCycleWhereInput
    /**
     * Limit how many MotorCycles to update.
     */
    limit?: number
  }

  /**
   * MotorCycle upsert
   */
  export type MotorCycleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * The filter to search for the MotorCycle to update in case it exists.
     */
    where: MotorCycleWhereUniqueInput
    /**
     * In case the MotorCycle found by the `where` argument doesn't exist, create a new MotorCycle with this data.
     */
    create: XOR<MotorCycleCreateInput, MotorCycleUncheckedCreateInput>
    /**
     * In case the MotorCycle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MotorCycleUpdateInput, MotorCycleUncheckedUpdateInput>
  }

  /**
   * MotorCycle delete
   */
  export type MotorCycleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
    /**
     * Filter which MotorCycle to delete.
     */
    where: MotorCycleWhereUniqueInput
  }

  /**
   * MotorCycle deleteMany
   */
  export type MotorCycleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MotorCycles to delete
     */
    where?: MotorCycleWhereInput
    /**
     * Limit how many MotorCycles to delete.
     */
    limit?: number
  }

  /**
   * MotorCycle.Contracts
   */
  export type MotorCycle$ContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    where?: ContractsWhereInput
    orderBy?: ContractsOrderByWithRelationInput | ContractsOrderByWithRelationInput[]
    cursor?: ContractsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * MotorCycle without action
   */
  export type MotorCycleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotorCycle
     */
    select?: MotorCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MotorCycle
     */
    omit?: MotorCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotorCycleInclude<ExtArgs> | null
  }


  /**
   * Model Clients
   */

  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsMinAggregateOutputType = {
    id: string | null
    tipo: $Enums.TipoCliente | null
    fullName: string | null
    documento: string | null
    telefone: string | null
    email: string | null
    dataNascimento: Date | null
    companyName: string | null
    cep: string | null
    rua: string | null
    numero: string | null
    bairro: string | null
    cidade: string | null
    estado: string | null
    complementos: string | null
    status: $Enums.StatusClient | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientsMaxAggregateOutputType = {
    id: string | null
    tipo: $Enums.TipoCliente | null
    fullName: string | null
    documento: string | null
    telefone: string | null
    email: string | null
    dataNascimento: Date | null
    companyName: string | null
    cep: string | null
    rua: string | null
    numero: string | null
    bairro: string | null
    cidade: string | null
    estado: string | null
    complementos: string | null
    status: $Enums.StatusClient | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientsCountAggregateOutputType = {
    id: number
    tipo: number
    fullName: number
    documento: number
    telefone: number
    email: number
    dataNascimento: number
    companyName: number
    cep: number
    rua: number
    numero: number
    bairro: number
    cidade: number
    estado: number
    complementos: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ClientsMinAggregateInputType = {
    id?: true
    tipo?: true
    fullName?: true
    documento?: true
    telefone?: true
    email?: true
    dataNascimento?: true
    companyName?: true
    cep?: true
    rua?: true
    numero?: true
    bairro?: true
    cidade?: true
    estado?: true
    complementos?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientsMaxAggregateInputType = {
    id?: true
    tipo?: true
    fullName?: true
    documento?: true
    telefone?: true
    email?: true
    dataNascimento?: true
    companyName?: true
    cep?: true
    rua?: true
    numero?: true
    bairro?: true
    cidade?: true
    estado?: true
    complementos?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientsCountAggregateInputType = {
    id?: true
    tipo?: true
    fullName?: true
    documento?: true
    telefone?: true
    email?: true
    dataNascimento?: true
    companyName?: true
    cep?: true
    rua?: true
    numero?: true
    bairro?: true
    cidade?: true
    estado?: true
    complementos?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ClientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to aggregate.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }




  export type ClientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientsWhereInput
    orderBy?: ClientsOrderByWithAggregationInput | ClientsOrderByWithAggregationInput[]
    by: ClientsScalarFieldEnum[] | ClientsScalarFieldEnum
    having?: ClientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }

  export type ClientsGroupByOutputType = {
    id: string
    tipo: $Enums.TipoCliente
    fullName: string
    documento: string
    telefone: string | null
    email: string
    dataNascimento: Date | null
    companyName: string | null
    cep: string
    rua: string
    numero: string
    bairro: string
    cidade: string
    estado: string
    complementos: string | null
    status: $Enums.StatusClient
    created_at: Date | null
    updated_at: Date | null
    _count: ClientsCountAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends ClientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientsGroupByOutputType[P]>
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      >
    >


  export type ClientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    fullName?: boolean
    documento?: boolean
    telefone?: boolean
    email?: boolean
    dataNascimento?: boolean
    companyName?: boolean
    cep?: boolean
    rua?: boolean
    numero?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    complementos?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    Contracts?: boolean | Clients$ContractsArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clients"]>

  export type ClientsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    fullName?: boolean
    documento?: boolean
    telefone?: boolean
    email?: boolean
    dataNascimento?: boolean
    companyName?: boolean
    cep?: boolean
    rua?: boolean
    numero?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    complementos?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["clients"]>

  export type ClientsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    fullName?: boolean
    documento?: boolean
    telefone?: boolean
    email?: boolean
    dataNascimento?: boolean
    companyName?: boolean
    cep?: boolean
    rua?: boolean
    numero?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    complementos?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["clients"]>

  export type ClientsSelectScalar = {
    id?: boolean
    tipo?: boolean
    fullName?: boolean
    documento?: boolean
    telefone?: boolean
    email?: boolean
    dataNascimento?: boolean
    companyName?: boolean
    cep?: boolean
    rua?: boolean
    numero?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    complementos?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ClientsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tipo" | "fullName" | "documento" | "telefone" | "email" | "dataNascimento" | "companyName" | "cep" | "rua" | "numero" | "bairro" | "cidade" | "estado" | "complementos" | "status" | "created_at" | "updated_at", ExtArgs["result"]["clients"]>
  export type ClientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Contracts?: boolean | Clients$ContractsArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClientsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clients"
    objects: {
      Contracts: Prisma.$ContractsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tipo: $Enums.TipoCliente
      fullName: string
      documento: string
      telefone: string | null
      email: string
      dataNascimento: Date | null
      companyName: string | null
      cep: string
      rua: string
      numero: string
      bairro: string
      cidade: string
      estado: string
      complementos: string | null
      status: $Enums.StatusClient
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["clients"]>
    composites: {}
  }

  type ClientsGetPayload<S extends boolean | null | undefined | ClientsDefaultArgs> = $Result.GetResult<Prisma.$ClientsPayload, S>

  type ClientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientsCountAggregateInputType | true
    }

  export interface ClientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clients'], meta: { name: 'Clients' } }
    /**
     * Find zero or one Clients that matches the filter.
     * @param {ClientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientsFindUniqueArgs>(args: SelectSubset<T, ClientsFindUniqueArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clients that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientsFindUniqueOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientsFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientsFindFirstArgs>(args?: SelectSubset<T, ClientsFindFirstArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientsFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientsWithIdOnly = await prisma.clients.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientsFindManyArgs>(args?: SelectSubset<T, ClientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clients.
     * @param {ClientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
     */
    create<T extends ClientsCreateArgs>(args: SelectSubset<T, ClientsCreateArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientsCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const clients = await prisma.clients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientsCreateManyArgs>(args?: SelectSubset<T, ClientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientsCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const clients = await prisma.clients.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientsWithIdOnly = await prisma.clients.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientsCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Clients.
     * @param {ClientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
     */
    delete<T extends ClientsDeleteArgs>(args: SelectSubset<T, ClientsDeleteArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clients.
     * @param {ClientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientsUpdateArgs>(args: SelectSubset<T, ClientsUpdateArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientsDeleteManyArgs>(args?: SelectSubset<T, ClientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientsUpdateManyArgs>(args: SelectSubset<T, ClientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients and returns the data updated in the database.
     * @param {ClientsUpdateManyAndReturnArgs} args - Arguments to update many Clients.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clients and only return the `id`
     * const clientsWithIdOnly = await prisma.clients.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientsUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Clients.
     * @param {ClientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
     */
    upsert<T extends ClientsUpsertArgs>(args: SelectSubset<T, ClientsUpsertArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientsCountArgs>(
      args?: Subset<T, ClientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): Prisma.PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientsGroupByArgs['orderBy'] }
        : { orderBy?: ClientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clients model
   */
  readonly fields: ClientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Contracts<T extends Clients$ContractsArgs<ExtArgs> = {}>(args?: Subset<T, Clients$ContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clients model
   */
  interface ClientsFieldRefs {
    readonly id: FieldRef<"Clients", 'String'>
    readonly tipo: FieldRef<"Clients", 'TipoCliente'>
    readonly fullName: FieldRef<"Clients", 'String'>
    readonly documento: FieldRef<"Clients", 'String'>
    readonly telefone: FieldRef<"Clients", 'String'>
    readonly email: FieldRef<"Clients", 'String'>
    readonly dataNascimento: FieldRef<"Clients", 'DateTime'>
    readonly companyName: FieldRef<"Clients", 'String'>
    readonly cep: FieldRef<"Clients", 'String'>
    readonly rua: FieldRef<"Clients", 'String'>
    readonly numero: FieldRef<"Clients", 'String'>
    readonly bairro: FieldRef<"Clients", 'String'>
    readonly cidade: FieldRef<"Clients", 'String'>
    readonly estado: FieldRef<"Clients", 'String'>
    readonly complementos: FieldRef<"Clients", 'String'>
    readonly status: FieldRef<"Clients", 'StatusClient'>
    readonly created_at: FieldRef<"Clients", 'DateTime'>
    readonly updated_at: FieldRef<"Clients", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Clients findUnique
   */
  export type ClientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients findUniqueOrThrow
   */
  export type ClientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients findFirst
   */
  export type ClientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * Clients findFirstOrThrow
   */
  export type ClientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * Clients findMany
   */
  export type ClientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * Clients create
   */
  export type ClientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * The data needed to create a Clients.
     */
    data: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
  }

  /**
   * Clients createMany
   */
  export type ClientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientsCreateManyInput | ClientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clients createManyAndReturn
   */
  export type ClientsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientsCreateManyInput | ClientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clients update
   */
  export type ClientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * The data needed to update a Clients.
     */
    data: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
    /**
     * Choose, which Clients to update.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients updateMany
   */
  export type ClientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientsUpdateManyMutationInput, ClientsUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientsWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Clients updateManyAndReturn
   */
  export type ClientsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientsUpdateManyMutationInput, ClientsUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientsWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Clients upsert
   */
  export type ClientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * The filter to search for the Clients to update in case it exists.
     */
    where: ClientsWhereUniqueInput
    /**
     * In case the Clients found by the `where` argument doesn't exist, create a new Clients with this data.
     */
    create: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
    /**
     * In case the Clients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
  }

  /**
   * Clients delete
   */
  export type ClientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter which Clients to delete.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients deleteMany
   */
  export type ClientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientsWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Clients.Contracts
   */
  export type Clients$ContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    where?: ContractsWhereInput
    orderBy?: ContractsOrderByWithRelationInput | ContractsOrderByWithRelationInput[]
    cursor?: ContractsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * Clients without action
   */
  export type ClientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
  }


  /**
   * Model Contracts
   */

  export type AggregateContracts = {
    _count: ContractsCountAggregateOutputType | null
    _avg: ContractsAvgAggregateOutputType | null
    _sum: ContractsSumAggregateOutputType | null
    _min: ContractsMinAggregateOutputType | null
    _max: ContractsMaxAggregateOutputType | null
  }

  export type ContractsAvgAggregateOutputType = {
    valor: number | null
  }

  export type ContractsSumAggregateOutputType = {
    valor: number | null
  }

  export type ContractsMinAggregateOutputType = {
    id: string | null
    valor: number | null
    data: Date | null
    status: $Enums.StatusContrato | null
    observacao: string | null
    pagamento: $Enums.Pagamento | null
    contractoPdf: string | null
    signatureToken: string | null
    signatureTokenExpiry: Date | null
    created_at: Date | null
    updated_at: Date | null
    motorcycleId: string | null
    clientId: string | null
  }

  export type ContractsMaxAggregateOutputType = {
    id: string | null
    valor: number | null
    data: Date | null
    status: $Enums.StatusContrato | null
    observacao: string | null
    pagamento: $Enums.Pagamento | null
    contractoPdf: string | null
    signatureToken: string | null
    signatureTokenExpiry: Date | null
    created_at: Date | null
    updated_at: Date | null
    motorcycleId: string | null
    clientId: string | null
  }

  export type ContractsCountAggregateOutputType = {
    id: number
    valor: number
    data: number
    status: number
    observacao: number
    pagamento: number
    contractoPdf: number
    signatures: number
    signatureToken: number
    signatureTokenExpiry: number
    created_at: number
    updated_at: number
    motorcycleId: number
    clientId: number
    _all: number
  }


  export type ContractsAvgAggregateInputType = {
    valor?: true
  }

  export type ContractsSumAggregateInputType = {
    valor?: true
  }

  export type ContractsMinAggregateInputType = {
    id?: true
    valor?: true
    data?: true
    status?: true
    observacao?: true
    pagamento?: true
    contractoPdf?: true
    signatureToken?: true
    signatureTokenExpiry?: true
    created_at?: true
    updated_at?: true
    motorcycleId?: true
    clientId?: true
  }

  export type ContractsMaxAggregateInputType = {
    id?: true
    valor?: true
    data?: true
    status?: true
    observacao?: true
    pagamento?: true
    contractoPdf?: true
    signatureToken?: true
    signatureTokenExpiry?: true
    created_at?: true
    updated_at?: true
    motorcycleId?: true
    clientId?: true
  }

  export type ContractsCountAggregateInputType = {
    id?: true
    valor?: true
    data?: true
    status?: true
    observacao?: true
    pagamento?: true
    contractoPdf?: true
    signatures?: true
    signatureToken?: true
    signatureTokenExpiry?: true
    created_at?: true
    updated_at?: true
    motorcycleId?: true
    clientId?: true
    _all?: true
  }

  export type ContractsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to aggregate.
     */
    where?: ContractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractsOrderByWithRelationInput | ContractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractsMaxAggregateInputType
  }

  export type GetContractsAggregateType<T extends ContractsAggregateArgs> = {
        [P in keyof T & keyof AggregateContracts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContracts[P]>
      : GetScalarType<T[P], AggregateContracts[P]>
  }




  export type ContractsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractsWhereInput
    orderBy?: ContractsOrderByWithAggregationInput | ContractsOrderByWithAggregationInput[]
    by: ContractsScalarFieldEnum[] | ContractsScalarFieldEnum
    having?: ContractsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractsCountAggregateInputType | true
    _avg?: ContractsAvgAggregateInputType
    _sum?: ContractsSumAggregateInputType
    _min?: ContractsMinAggregateInputType
    _max?: ContractsMaxAggregateInputType
  }

  export type ContractsGroupByOutputType = {
    id: string
    valor: number
    data: Date
    status: $Enums.StatusContrato
    observacao: string | null
    pagamento: $Enums.Pagamento
    contractoPdf: string | null
    signatures: JsonValue | null
    signatureToken: string | null
    signatureTokenExpiry: Date | null
    created_at: Date | null
    updated_at: Date | null
    motorcycleId: string
    clientId: string
    _count: ContractsCountAggregateOutputType | null
    _avg: ContractsAvgAggregateOutputType | null
    _sum: ContractsSumAggregateOutputType | null
    _min: ContractsMinAggregateOutputType | null
    _max: ContractsMaxAggregateOutputType | null
  }

  type GetContractsGroupByPayload<T extends ContractsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractsGroupByOutputType[P]>
            : GetScalarType<T[P], ContractsGroupByOutputType[P]>
        }
      >
    >


  export type ContractsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    data?: boolean
    status?: boolean
    observacao?: boolean
    pagamento?: boolean
    contractoPdf?: boolean
    signatures?: boolean
    signatureToken?: boolean
    signatureTokenExpiry?: boolean
    created_at?: boolean
    updated_at?: boolean
    motorcycleId?: boolean
    clientId?: boolean
    motorcycle?: boolean | MotorCycleDefaultArgs<ExtArgs>
    client?: boolean | ClientsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contracts"]>

  export type ContractsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    data?: boolean
    status?: boolean
    observacao?: boolean
    pagamento?: boolean
    contractoPdf?: boolean
    signatures?: boolean
    signatureToken?: boolean
    signatureTokenExpiry?: boolean
    created_at?: boolean
    updated_at?: boolean
    motorcycleId?: boolean
    clientId?: boolean
    motorcycle?: boolean | MotorCycleDefaultArgs<ExtArgs>
    client?: boolean | ClientsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contracts"]>

  export type ContractsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    data?: boolean
    status?: boolean
    observacao?: boolean
    pagamento?: boolean
    contractoPdf?: boolean
    signatures?: boolean
    signatureToken?: boolean
    signatureTokenExpiry?: boolean
    created_at?: boolean
    updated_at?: boolean
    motorcycleId?: boolean
    clientId?: boolean
    motorcycle?: boolean | MotorCycleDefaultArgs<ExtArgs>
    client?: boolean | ClientsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contracts"]>

  export type ContractsSelectScalar = {
    id?: boolean
    valor?: boolean
    data?: boolean
    status?: boolean
    observacao?: boolean
    pagamento?: boolean
    contractoPdf?: boolean
    signatures?: boolean
    signatureToken?: boolean
    signatureTokenExpiry?: boolean
    created_at?: boolean
    updated_at?: boolean
    motorcycleId?: boolean
    clientId?: boolean
  }

  export type ContractsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "valor" | "data" | "status" | "observacao" | "pagamento" | "contractoPdf" | "signatures" | "signatureToken" | "signatureTokenExpiry" | "created_at" | "updated_at" | "motorcycleId" | "clientId", ExtArgs["result"]["contracts"]>
  export type ContractsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    motorcycle?: boolean | MotorCycleDefaultArgs<ExtArgs>
    client?: boolean | ClientsDefaultArgs<ExtArgs>
  }
  export type ContractsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    motorcycle?: boolean | MotorCycleDefaultArgs<ExtArgs>
    client?: boolean | ClientsDefaultArgs<ExtArgs>
  }
  export type ContractsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    motorcycle?: boolean | MotorCycleDefaultArgs<ExtArgs>
    client?: boolean | ClientsDefaultArgs<ExtArgs>
  }

  export type $ContractsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contracts"
    objects: {
      motorcycle: Prisma.$MotorCyclePayload<ExtArgs>
      client: Prisma.$ClientsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      valor: number
      data: Date
      status: $Enums.StatusContrato
      observacao: string | null
      pagamento: $Enums.Pagamento
      contractoPdf: string | null
      signatures: Prisma.JsonValue | null
      signatureToken: string | null
      signatureTokenExpiry: Date | null
      created_at: Date | null
      updated_at: Date | null
      motorcycleId: string
      clientId: string
    }, ExtArgs["result"]["contracts"]>
    composites: {}
  }

  type ContractsGetPayload<S extends boolean | null | undefined | ContractsDefaultArgs> = $Result.GetResult<Prisma.$ContractsPayload, S>

  type ContractsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractsCountAggregateInputType | true
    }

  export interface ContractsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contracts'], meta: { name: 'Contracts' } }
    /**
     * Find zero or one Contracts that matches the filter.
     * @param {ContractsFindUniqueArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractsFindUniqueArgs>(args: SelectSubset<T, ContractsFindUniqueArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contracts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractsFindUniqueOrThrowArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractsFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsFindFirstArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractsFindFirstArgs>(args?: SelectSubset<T, ContractsFindFirstArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contracts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsFindFirstOrThrowArgs} args - Arguments to find a Contracts
     * @example
     * // Get one Contracts
     * const contracts = await prisma.contracts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractsFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contracts.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contracts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractsWithIdOnly = await prisma.contracts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractsFindManyArgs>(args?: SelectSubset<T, ContractsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contracts.
     * @param {ContractsCreateArgs} args - Arguments to create a Contracts.
     * @example
     * // Create one Contracts
     * const Contracts = await prisma.contracts.create({
     *   data: {
     *     // ... data to create a Contracts
     *   }
     * })
     * 
     */
    create<T extends ContractsCreateArgs>(args: SelectSubset<T, ContractsCreateArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contracts.
     * @param {ContractsCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contracts = await prisma.contracts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractsCreateManyArgs>(args?: SelectSubset<T, ContractsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contracts and returns the data saved in the database.
     * @param {ContractsCreateManyAndReturnArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contracts = await prisma.contracts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contracts and only return the `id`
     * const contractsWithIdOnly = await prisma.contracts.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractsCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contracts.
     * @param {ContractsDeleteArgs} args - Arguments to delete one Contracts.
     * @example
     * // Delete one Contracts
     * const Contracts = await prisma.contracts.delete({
     *   where: {
     *     // ... filter to delete one Contracts
     *   }
     * })
     * 
     */
    delete<T extends ContractsDeleteArgs>(args: SelectSubset<T, ContractsDeleteArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contracts.
     * @param {ContractsUpdateArgs} args - Arguments to update one Contracts.
     * @example
     * // Update one Contracts
     * const contracts = await prisma.contracts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractsUpdateArgs>(args: SelectSubset<T, ContractsUpdateArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contracts.
     * @param {ContractsDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contracts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractsDeleteManyArgs>(args?: SelectSubset<T, ContractsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contracts = await prisma.contracts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractsUpdateManyArgs>(args: SelectSubset<T, ContractsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts and returns the data updated in the database.
     * @param {ContractsUpdateManyAndReturnArgs} args - Arguments to update many Contracts.
     * @example
     * // Update many Contracts
     * const contracts = await prisma.contracts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contracts and only return the `id`
     * const contractsWithIdOnly = await prisma.contracts.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractsUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contracts.
     * @param {ContractsUpsertArgs} args - Arguments to update or create a Contracts.
     * @example
     * // Update or create a Contracts
     * const contracts = await prisma.contracts.upsert({
     *   create: {
     *     // ... data to create a Contracts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contracts we want to update
     *   }
     * })
     */
    upsert<T extends ContractsUpsertArgs>(args: SelectSubset<T, ContractsUpsertArgs<ExtArgs>>): Prisma__ContractsClient<$Result.GetResult<Prisma.$ContractsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contracts.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractsCountArgs>(
      args?: Subset<T, ContractsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractsAggregateArgs>(args: Subset<T, ContractsAggregateArgs>): Prisma.PrismaPromise<GetContractsAggregateType<T>>

    /**
     * Group by Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractsGroupByArgs['orderBy'] }
        : { orderBy?: ContractsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contracts model
   */
  readonly fields: ContractsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contracts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    motorcycle<T extends MotorCycleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MotorCycleDefaultArgs<ExtArgs>>): Prisma__MotorCycleClient<$Result.GetResult<Prisma.$MotorCyclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientsDefaultArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contracts model
   */
  interface ContractsFieldRefs {
    readonly id: FieldRef<"Contracts", 'String'>
    readonly valor: FieldRef<"Contracts", 'Int'>
    readonly data: FieldRef<"Contracts", 'DateTime'>
    readonly status: FieldRef<"Contracts", 'StatusContrato'>
    readonly observacao: FieldRef<"Contracts", 'String'>
    readonly pagamento: FieldRef<"Contracts", 'Pagamento'>
    readonly contractoPdf: FieldRef<"Contracts", 'String'>
    readonly signatures: FieldRef<"Contracts", 'Json'>
    readonly signatureToken: FieldRef<"Contracts", 'String'>
    readonly signatureTokenExpiry: FieldRef<"Contracts", 'DateTime'>
    readonly created_at: FieldRef<"Contracts", 'DateTime'>
    readonly updated_at: FieldRef<"Contracts", 'DateTime'>
    readonly motorcycleId: FieldRef<"Contracts", 'String'>
    readonly clientId: FieldRef<"Contracts", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contracts findUnique
   */
  export type ContractsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where: ContractsWhereUniqueInput
  }

  /**
   * Contracts findUniqueOrThrow
   */
  export type ContractsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where: ContractsWhereUniqueInput
  }

  /**
   * Contracts findFirst
   */
  export type ContractsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractsOrderByWithRelationInput | ContractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * Contracts findFirstOrThrow
   */
  export type ContractsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractsOrderByWithRelationInput | ContractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * Contracts findMany
   */
  export type ContractsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractsOrderByWithRelationInput | ContractsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractsScalarFieldEnum | ContractsScalarFieldEnum[]
  }

  /**
   * Contracts create
   */
  export type ContractsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * The data needed to create a Contracts.
     */
    data: XOR<ContractsCreateInput, ContractsUncheckedCreateInput>
  }

  /**
   * Contracts createMany
   */
  export type ContractsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractsCreateManyInput | ContractsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contracts createManyAndReturn
   */
  export type ContractsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * The data used to create many Contracts.
     */
    data: ContractsCreateManyInput | ContractsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contracts update
   */
  export type ContractsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * The data needed to update a Contracts.
     */
    data: XOR<ContractsUpdateInput, ContractsUncheckedUpdateInput>
    /**
     * Choose, which Contracts to update.
     */
    where: ContractsWhereUniqueInput
  }

  /**
   * Contracts updateMany
   */
  export type ContractsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractsUpdateManyMutationInput, ContractsUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractsWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
  }

  /**
   * Contracts updateManyAndReturn
   */
  export type ContractsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractsUpdateManyMutationInput, ContractsUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractsWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contracts upsert
   */
  export type ContractsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * The filter to search for the Contracts to update in case it exists.
     */
    where: ContractsWhereUniqueInput
    /**
     * In case the Contracts found by the `where` argument doesn't exist, create a new Contracts with this data.
     */
    create: XOR<ContractsCreateInput, ContractsUncheckedCreateInput>
    /**
     * In case the Contracts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractsUpdateInput, ContractsUncheckedUpdateInput>
  }

  /**
   * Contracts delete
   */
  export type ContractsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
    /**
     * Filter which Contracts to delete.
     */
    where: ContractsWhereUniqueInput
  }

  /**
   * Contracts deleteMany
   */
  export type ContractsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractsWhereInput
    /**
     * Limit how many Contracts to delete.
     */
    limit?: number
  }

  /**
   * Contracts without action
   */
  export type ContractsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contracts
     */
    select?: ContractsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contracts
     */
    omit?: ContractsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const MotorCycleScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    cor: 'cor',
    placa: 'placa',
    ano: 'ano',
    chassi: 'chassi',
    renavam: 'renavam',
    km: 'km',
    valor_compra: 'valor_compra',
    valor_venda: 'valor_venda',
    valor_fipe: 'valor_fipe',
    observacao: 'observacao',
    foto1: 'foto1',
    foto2: 'foto2',
    foto3: 'foto3',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type MotorCycleScalarFieldEnum = (typeof MotorCycleScalarFieldEnum)[keyof typeof MotorCycleScalarFieldEnum]


  export const ClientsScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    fullName: 'fullName',
    documento: 'documento',
    telefone: 'telefone',
    email: 'email',
    dataNascimento: 'dataNascimento',
    companyName: 'companyName',
    cep: 'cep',
    rua: 'rua',
    numero: 'numero',
    bairro: 'bairro',
    cidade: 'cidade',
    estado: 'estado',
    complementos: 'complementos',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const ContractsScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    data: 'data',
    status: 'status',
    observacao: 'observacao',
    pagamento: 'pagamento',
    contractoPdf: 'contractoPdf',
    signatures: 'signatures',
    signatureToken: 'signatureToken',
    signatureTokenExpiry: 'signatureTokenExpiry',
    created_at: 'created_at',
    updated_at: 'updated_at',
    motorcycleId: 'motorcycleId',
    clientId: 'clientId'
  };

  export type ContractsScalarFieldEnum = (typeof ContractsScalarFieldEnum)[keyof typeof ContractsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'StatusMotorcycle'
   */
  export type EnumStatusMotorcycleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusMotorcycle'>
    


  /**
   * Reference to a field of type 'StatusMotorcycle[]'
   */
  export type ListEnumStatusMotorcycleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusMotorcycle[]'>
    


  /**
   * Reference to a field of type 'TipoCliente'
   */
  export type EnumTipoClienteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCliente'>
    


  /**
   * Reference to a field of type 'TipoCliente[]'
   */
  export type ListEnumTipoClienteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCliente[]'>
    


  /**
   * Reference to a field of type 'StatusClient'
   */
  export type EnumStatusClientFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusClient'>
    


  /**
   * Reference to a field of type 'StatusClient[]'
   */
  export type ListEnumStatusClientFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusClient[]'>
    


  /**
   * Reference to a field of type 'StatusContrato'
   */
  export type EnumStatusContratoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusContrato'>
    


  /**
   * Reference to a field of type 'StatusContrato[]'
   */
  export type ListEnumStatusContratoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusContrato[]'>
    


  /**
   * Reference to a field of type 'Pagamento'
   */
  export type EnumPagamentoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Pagamento'>
    


  /**
   * Reference to a field of type 'Pagamento[]'
   */
  export type ListEnumPagamentoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Pagamento[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    name?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    created_at?: DateTimeNullableFilter<"Users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Users"> | Date | string | null
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    name?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    created_at?: DateTimeNullableFilter<"Users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Users"> | Date | string | null
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    name?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
  }

  export type MotorCycleWhereInput = {
    AND?: MotorCycleWhereInput | MotorCycleWhereInput[]
    OR?: MotorCycleWhereInput[]
    NOT?: MotorCycleWhereInput | MotorCycleWhereInput[]
    id?: StringFilter<"MotorCycle"> | string
    nome?: StringFilter<"MotorCycle"> | string
    cor?: StringFilter<"MotorCycle"> | string
    placa?: StringFilter<"MotorCycle"> | string
    ano?: DateTimeFilter<"MotorCycle"> | Date | string
    chassi?: StringFilter<"MotorCycle"> | string
    renavam?: StringFilter<"MotorCycle"> | string
    km?: StringFilter<"MotorCycle"> | string
    valor_compra?: IntFilter<"MotorCycle"> | number
    valor_venda?: IntFilter<"MotorCycle"> | number
    valor_fipe?: IntFilter<"MotorCycle"> | number
    observacao?: StringNullableFilter<"MotorCycle"> | string | null
    foto1?: StringNullableFilter<"MotorCycle"> | string | null
    foto2?: StringNullableFilter<"MotorCycle"> | string | null
    foto3?: StringNullableFilter<"MotorCycle"> | string | null
    status?: EnumStatusMotorcycleFilter<"MotorCycle"> | $Enums.StatusMotorcycle
    created_at?: DateTimeNullableFilter<"MotorCycle"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"MotorCycle"> | Date | string | null
    Contracts?: ContractsListRelationFilter
  }

  export type MotorCycleOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    placa?: SortOrder
    ano?: SortOrder
    chassi?: SortOrder
    renavam?: SortOrder
    km?: SortOrder
    valor_compra?: SortOrder
    valor_venda?: SortOrder
    valor_fipe?: SortOrder
    observacao?: SortOrderInput | SortOrder
    foto1?: SortOrderInput | SortOrder
    foto2?: SortOrderInput | SortOrder
    foto3?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    Contracts?: ContractsOrderByRelationAggregateInput
  }

  export type MotorCycleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    placa?: string
    chassi?: string
    renavam?: string
    AND?: MotorCycleWhereInput | MotorCycleWhereInput[]
    OR?: MotorCycleWhereInput[]
    NOT?: MotorCycleWhereInput | MotorCycleWhereInput[]
    nome?: StringFilter<"MotorCycle"> | string
    cor?: StringFilter<"MotorCycle"> | string
    ano?: DateTimeFilter<"MotorCycle"> | Date | string
    km?: StringFilter<"MotorCycle"> | string
    valor_compra?: IntFilter<"MotorCycle"> | number
    valor_venda?: IntFilter<"MotorCycle"> | number
    valor_fipe?: IntFilter<"MotorCycle"> | number
    observacao?: StringNullableFilter<"MotorCycle"> | string | null
    foto1?: StringNullableFilter<"MotorCycle"> | string | null
    foto2?: StringNullableFilter<"MotorCycle"> | string | null
    foto3?: StringNullableFilter<"MotorCycle"> | string | null
    status?: EnumStatusMotorcycleFilter<"MotorCycle"> | $Enums.StatusMotorcycle
    created_at?: DateTimeNullableFilter<"MotorCycle"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"MotorCycle"> | Date | string | null
    Contracts?: ContractsListRelationFilter
  }, "id" | "placa" | "chassi" | "renavam">

  export type MotorCycleOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    placa?: SortOrder
    ano?: SortOrder
    chassi?: SortOrder
    renavam?: SortOrder
    km?: SortOrder
    valor_compra?: SortOrder
    valor_venda?: SortOrder
    valor_fipe?: SortOrder
    observacao?: SortOrderInput | SortOrder
    foto1?: SortOrderInput | SortOrder
    foto2?: SortOrderInput | SortOrder
    foto3?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: MotorCycleCountOrderByAggregateInput
    _avg?: MotorCycleAvgOrderByAggregateInput
    _max?: MotorCycleMaxOrderByAggregateInput
    _min?: MotorCycleMinOrderByAggregateInput
    _sum?: MotorCycleSumOrderByAggregateInput
  }

  export type MotorCycleScalarWhereWithAggregatesInput = {
    AND?: MotorCycleScalarWhereWithAggregatesInput | MotorCycleScalarWhereWithAggregatesInput[]
    OR?: MotorCycleScalarWhereWithAggregatesInput[]
    NOT?: MotorCycleScalarWhereWithAggregatesInput | MotorCycleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MotorCycle"> | string
    nome?: StringWithAggregatesFilter<"MotorCycle"> | string
    cor?: StringWithAggregatesFilter<"MotorCycle"> | string
    placa?: StringWithAggregatesFilter<"MotorCycle"> | string
    ano?: DateTimeWithAggregatesFilter<"MotorCycle"> | Date | string
    chassi?: StringWithAggregatesFilter<"MotorCycle"> | string
    renavam?: StringWithAggregatesFilter<"MotorCycle"> | string
    km?: StringWithAggregatesFilter<"MotorCycle"> | string
    valor_compra?: IntWithAggregatesFilter<"MotorCycle"> | number
    valor_venda?: IntWithAggregatesFilter<"MotorCycle"> | number
    valor_fipe?: IntWithAggregatesFilter<"MotorCycle"> | number
    observacao?: StringNullableWithAggregatesFilter<"MotorCycle"> | string | null
    foto1?: StringNullableWithAggregatesFilter<"MotorCycle"> | string | null
    foto2?: StringNullableWithAggregatesFilter<"MotorCycle"> | string | null
    foto3?: StringNullableWithAggregatesFilter<"MotorCycle"> | string | null
    status?: EnumStatusMotorcycleWithAggregatesFilter<"MotorCycle"> | $Enums.StatusMotorcycle
    created_at?: DateTimeNullableWithAggregatesFilter<"MotorCycle"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"MotorCycle"> | Date | string | null
  }

  export type ClientsWhereInput = {
    AND?: ClientsWhereInput | ClientsWhereInput[]
    OR?: ClientsWhereInput[]
    NOT?: ClientsWhereInput | ClientsWhereInput[]
    id?: StringFilter<"Clients"> | string
    tipo?: EnumTipoClienteFilter<"Clients"> | $Enums.TipoCliente
    fullName?: StringFilter<"Clients"> | string
    documento?: StringFilter<"Clients"> | string
    telefone?: StringNullableFilter<"Clients"> | string | null
    email?: StringFilter<"Clients"> | string
    dataNascimento?: DateTimeNullableFilter<"Clients"> | Date | string | null
    companyName?: StringNullableFilter<"Clients"> | string | null
    cep?: StringFilter<"Clients"> | string
    rua?: StringFilter<"Clients"> | string
    numero?: StringFilter<"Clients"> | string
    bairro?: StringFilter<"Clients"> | string
    cidade?: StringFilter<"Clients"> | string
    estado?: StringFilter<"Clients"> | string
    complementos?: StringNullableFilter<"Clients"> | string | null
    status?: EnumStatusClientFilter<"Clients"> | $Enums.StatusClient
    created_at?: DateTimeNullableFilter<"Clients"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Clients"> | Date | string | null
    Contracts?: ContractsListRelationFilter
  }

  export type ClientsOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    fullName?: SortOrder
    documento?: SortOrder
    telefone?: SortOrderInput | SortOrder
    email?: SortOrder
    dataNascimento?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    cep?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    complementos?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    Contracts?: ContractsOrderByRelationAggregateInput
  }

  export type ClientsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    documento?: string
    email?: string
    AND?: ClientsWhereInput | ClientsWhereInput[]
    OR?: ClientsWhereInput[]
    NOT?: ClientsWhereInput | ClientsWhereInput[]
    tipo?: EnumTipoClienteFilter<"Clients"> | $Enums.TipoCliente
    fullName?: StringFilter<"Clients"> | string
    telefone?: StringNullableFilter<"Clients"> | string | null
    dataNascimento?: DateTimeNullableFilter<"Clients"> | Date | string | null
    companyName?: StringNullableFilter<"Clients"> | string | null
    cep?: StringFilter<"Clients"> | string
    rua?: StringFilter<"Clients"> | string
    numero?: StringFilter<"Clients"> | string
    bairro?: StringFilter<"Clients"> | string
    cidade?: StringFilter<"Clients"> | string
    estado?: StringFilter<"Clients"> | string
    complementos?: StringNullableFilter<"Clients"> | string | null
    status?: EnumStatusClientFilter<"Clients"> | $Enums.StatusClient
    created_at?: DateTimeNullableFilter<"Clients"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Clients"> | Date | string | null
    Contracts?: ContractsListRelationFilter
  }, "id" | "documento" | "email">

  export type ClientsOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    fullName?: SortOrder
    documento?: SortOrder
    telefone?: SortOrderInput | SortOrder
    email?: SortOrder
    dataNascimento?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    cep?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    complementos?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: ClientsCountOrderByAggregateInput
    _max?: ClientsMaxOrderByAggregateInput
    _min?: ClientsMinOrderByAggregateInput
  }

  export type ClientsScalarWhereWithAggregatesInput = {
    AND?: ClientsScalarWhereWithAggregatesInput | ClientsScalarWhereWithAggregatesInput[]
    OR?: ClientsScalarWhereWithAggregatesInput[]
    NOT?: ClientsScalarWhereWithAggregatesInput | ClientsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Clients"> | string
    tipo?: EnumTipoClienteWithAggregatesFilter<"Clients"> | $Enums.TipoCliente
    fullName?: StringWithAggregatesFilter<"Clients"> | string
    documento?: StringWithAggregatesFilter<"Clients"> | string
    telefone?: StringNullableWithAggregatesFilter<"Clients"> | string | null
    email?: StringWithAggregatesFilter<"Clients"> | string
    dataNascimento?: DateTimeNullableWithAggregatesFilter<"Clients"> | Date | string | null
    companyName?: StringNullableWithAggregatesFilter<"Clients"> | string | null
    cep?: StringWithAggregatesFilter<"Clients"> | string
    rua?: StringWithAggregatesFilter<"Clients"> | string
    numero?: StringWithAggregatesFilter<"Clients"> | string
    bairro?: StringWithAggregatesFilter<"Clients"> | string
    cidade?: StringWithAggregatesFilter<"Clients"> | string
    estado?: StringWithAggregatesFilter<"Clients"> | string
    complementos?: StringNullableWithAggregatesFilter<"Clients"> | string | null
    status?: EnumStatusClientWithAggregatesFilter<"Clients"> | $Enums.StatusClient
    created_at?: DateTimeNullableWithAggregatesFilter<"Clients"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Clients"> | Date | string | null
  }

  export type ContractsWhereInput = {
    AND?: ContractsWhereInput | ContractsWhereInput[]
    OR?: ContractsWhereInput[]
    NOT?: ContractsWhereInput | ContractsWhereInput[]
    id?: StringFilter<"Contracts"> | string
    valor?: IntFilter<"Contracts"> | number
    data?: DateTimeFilter<"Contracts"> | Date | string
    status?: EnumStatusContratoFilter<"Contracts"> | $Enums.StatusContrato
    observacao?: StringNullableFilter<"Contracts"> | string | null
    pagamento?: EnumPagamentoFilter<"Contracts"> | $Enums.Pagamento
    contractoPdf?: StringNullableFilter<"Contracts"> | string | null
    signatures?: JsonNullableFilter<"Contracts">
    signatureToken?: StringNullableFilter<"Contracts"> | string | null
    signatureTokenExpiry?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    created_at?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    motorcycleId?: StringFilter<"Contracts"> | string
    clientId?: StringFilter<"Contracts"> | string
    motorcycle?: XOR<MotorCycleScalarRelationFilter, MotorCycleWhereInput>
    client?: XOR<ClientsScalarRelationFilter, ClientsWhereInput>
  }

  export type ContractsOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    data?: SortOrder
    status?: SortOrder
    observacao?: SortOrderInput | SortOrder
    pagamento?: SortOrder
    contractoPdf?: SortOrderInput | SortOrder
    signatures?: SortOrderInput | SortOrder
    signatureToken?: SortOrderInput | SortOrder
    signatureTokenExpiry?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    motorcycleId?: SortOrder
    clientId?: SortOrder
    motorcycle?: MotorCycleOrderByWithRelationInput
    client?: ClientsOrderByWithRelationInput
  }

  export type ContractsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractsWhereInput | ContractsWhereInput[]
    OR?: ContractsWhereInput[]
    NOT?: ContractsWhereInput | ContractsWhereInput[]
    valor?: IntFilter<"Contracts"> | number
    data?: DateTimeFilter<"Contracts"> | Date | string
    status?: EnumStatusContratoFilter<"Contracts"> | $Enums.StatusContrato
    observacao?: StringNullableFilter<"Contracts"> | string | null
    pagamento?: EnumPagamentoFilter<"Contracts"> | $Enums.Pagamento
    contractoPdf?: StringNullableFilter<"Contracts"> | string | null
    signatures?: JsonNullableFilter<"Contracts">
    signatureToken?: StringNullableFilter<"Contracts"> | string | null
    signatureTokenExpiry?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    created_at?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    motorcycleId?: StringFilter<"Contracts"> | string
    clientId?: StringFilter<"Contracts"> | string
    motorcycle?: XOR<MotorCycleScalarRelationFilter, MotorCycleWhereInput>
    client?: XOR<ClientsScalarRelationFilter, ClientsWhereInput>
  }, "id">

  export type ContractsOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    data?: SortOrder
    status?: SortOrder
    observacao?: SortOrderInput | SortOrder
    pagamento?: SortOrder
    contractoPdf?: SortOrderInput | SortOrder
    signatures?: SortOrderInput | SortOrder
    signatureToken?: SortOrderInput | SortOrder
    signatureTokenExpiry?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    motorcycleId?: SortOrder
    clientId?: SortOrder
    _count?: ContractsCountOrderByAggregateInput
    _avg?: ContractsAvgOrderByAggregateInput
    _max?: ContractsMaxOrderByAggregateInput
    _min?: ContractsMinOrderByAggregateInput
    _sum?: ContractsSumOrderByAggregateInput
  }

  export type ContractsScalarWhereWithAggregatesInput = {
    AND?: ContractsScalarWhereWithAggregatesInput | ContractsScalarWhereWithAggregatesInput[]
    OR?: ContractsScalarWhereWithAggregatesInput[]
    NOT?: ContractsScalarWhereWithAggregatesInput | ContractsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contracts"> | string
    valor?: IntWithAggregatesFilter<"Contracts"> | number
    data?: DateTimeWithAggregatesFilter<"Contracts"> | Date | string
    status?: EnumStatusContratoWithAggregatesFilter<"Contracts"> | $Enums.StatusContrato
    observacao?: StringNullableWithAggregatesFilter<"Contracts"> | string | null
    pagamento?: EnumPagamentoWithAggregatesFilter<"Contracts"> | $Enums.Pagamento
    contractoPdf?: StringNullableWithAggregatesFilter<"Contracts"> | string | null
    signatures?: JsonNullableWithAggregatesFilter<"Contracts">
    signatureToken?: StringNullableWithAggregatesFilter<"Contracts"> | string | null
    signatureTokenExpiry?: DateTimeNullableWithAggregatesFilter<"Contracts"> | Date | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"Contracts"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Contracts"> | Date | string | null
    motorcycleId?: StringWithAggregatesFilter<"Contracts"> | string
    clientId?: StringWithAggregatesFilter<"Contracts"> | string
  }

  export type UsersCreateInput = {
    id?: string
    name: string
    password: string
    email: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    name: string
    password: string
    email: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersCreateManyInput = {
    id?: string
    name: string
    password: string
    email: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MotorCycleCreateInput = {
    id?: string
    nome: string
    cor: string
    placa: string
    ano: Date | string
    chassi: string
    renavam: string
    km: string
    valor_compra: number
    valor_venda: number
    valor_fipe: number
    observacao?: string | null
    foto1?: string | null
    foto2?: string | null
    foto3?: string | null
    status?: $Enums.StatusMotorcycle
    created_at?: Date | string | null
    updated_at?: Date | string | null
    Contracts?: ContractsCreateNestedManyWithoutMotorcycleInput
  }

  export type MotorCycleUncheckedCreateInput = {
    id?: string
    nome: string
    cor: string
    placa: string
    ano: Date | string
    chassi: string
    renavam: string
    km: string
    valor_compra: number
    valor_venda: number
    valor_fipe: number
    observacao?: string | null
    foto1?: string | null
    foto2?: string | null
    foto3?: string | null
    status?: $Enums.StatusMotorcycle
    created_at?: Date | string | null
    updated_at?: Date | string | null
    Contracts?: ContractsUncheckedCreateNestedManyWithoutMotorcycleInput
  }

  export type MotorCycleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    chassi?: StringFieldUpdateOperationsInput | string
    renavam?: StringFieldUpdateOperationsInput | string
    km?: StringFieldUpdateOperationsInput | string
    valor_compra?: IntFieldUpdateOperationsInput | number
    valor_venda?: IntFieldUpdateOperationsInput | number
    valor_fipe?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    foto1?: NullableStringFieldUpdateOperationsInput | string | null
    foto2?: NullableStringFieldUpdateOperationsInput | string | null
    foto3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusMotorcycleFieldUpdateOperationsInput | $Enums.StatusMotorcycle
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Contracts?: ContractsUpdateManyWithoutMotorcycleNestedInput
  }

  export type MotorCycleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    chassi?: StringFieldUpdateOperationsInput | string
    renavam?: StringFieldUpdateOperationsInput | string
    km?: StringFieldUpdateOperationsInput | string
    valor_compra?: IntFieldUpdateOperationsInput | number
    valor_venda?: IntFieldUpdateOperationsInput | number
    valor_fipe?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    foto1?: NullableStringFieldUpdateOperationsInput | string | null
    foto2?: NullableStringFieldUpdateOperationsInput | string | null
    foto3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusMotorcycleFieldUpdateOperationsInput | $Enums.StatusMotorcycle
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Contracts?: ContractsUncheckedUpdateManyWithoutMotorcycleNestedInput
  }

  export type MotorCycleCreateManyInput = {
    id?: string
    nome: string
    cor: string
    placa: string
    ano: Date | string
    chassi: string
    renavam: string
    km: string
    valor_compra: number
    valor_venda: number
    valor_fipe: number
    observacao?: string | null
    foto1?: string | null
    foto2?: string | null
    foto3?: string | null
    status?: $Enums.StatusMotorcycle
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type MotorCycleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    chassi?: StringFieldUpdateOperationsInput | string
    renavam?: StringFieldUpdateOperationsInput | string
    km?: StringFieldUpdateOperationsInput | string
    valor_compra?: IntFieldUpdateOperationsInput | number
    valor_venda?: IntFieldUpdateOperationsInput | number
    valor_fipe?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    foto1?: NullableStringFieldUpdateOperationsInput | string | null
    foto2?: NullableStringFieldUpdateOperationsInput | string | null
    foto3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusMotorcycleFieldUpdateOperationsInput | $Enums.StatusMotorcycle
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MotorCycleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    chassi?: StringFieldUpdateOperationsInput | string
    renavam?: StringFieldUpdateOperationsInput | string
    km?: StringFieldUpdateOperationsInput | string
    valor_compra?: IntFieldUpdateOperationsInput | number
    valor_venda?: IntFieldUpdateOperationsInput | number
    valor_fipe?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    foto1?: NullableStringFieldUpdateOperationsInput | string | null
    foto2?: NullableStringFieldUpdateOperationsInput | string | null
    foto3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusMotorcycleFieldUpdateOperationsInput | $Enums.StatusMotorcycle
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientsCreateInput = {
    id?: string
    tipo: $Enums.TipoCliente
    fullName: string
    documento: string
    telefone?: string | null
    email: string
    dataNascimento?: Date | string | null
    companyName?: string | null
    cep: string
    rua: string
    numero: string
    bairro: string
    cidade: string
    estado: string
    complementos?: string | null
    status?: $Enums.StatusClient
    created_at?: Date | string | null
    updated_at?: Date | string | null
    Contracts?: ContractsCreateNestedManyWithoutClientInput
  }

  export type ClientsUncheckedCreateInput = {
    id?: string
    tipo: $Enums.TipoCliente
    fullName: string
    documento: string
    telefone?: string | null
    email: string
    dataNascimento?: Date | string | null
    companyName?: string | null
    cep: string
    rua: string
    numero: string
    bairro: string
    cidade: string
    estado: string
    complementos?: string | null
    status?: $Enums.StatusClient
    created_at?: Date | string | null
    updated_at?: Date | string | null
    Contracts?: ContractsUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoClienteFieldUpdateOperationsInput | $Enums.TipoCliente
    fullName?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    complementos?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusClientFieldUpdateOperationsInput | $Enums.StatusClient
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Contracts?: ContractsUpdateManyWithoutClientNestedInput
  }

  export type ClientsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoClienteFieldUpdateOperationsInput | $Enums.TipoCliente
    fullName?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    complementos?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusClientFieldUpdateOperationsInput | $Enums.StatusClient
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Contracts?: ContractsUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientsCreateManyInput = {
    id?: string
    tipo: $Enums.TipoCliente
    fullName: string
    documento: string
    telefone?: string | null
    email: string
    dataNascimento?: Date | string | null
    companyName?: string | null
    cep: string
    rua: string
    numero: string
    bairro: string
    cidade: string
    estado: string
    complementos?: string | null
    status?: $Enums.StatusClient
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ClientsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoClienteFieldUpdateOperationsInput | $Enums.TipoCliente
    fullName?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    complementos?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusClientFieldUpdateOperationsInput | $Enums.StatusClient
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoClienteFieldUpdateOperationsInput | $Enums.TipoCliente
    fullName?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    complementos?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusClientFieldUpdateOperationsInput | $Enums.StatusClient
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractsCreateInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    motorcycle: MotorCycleCreateNestedOneWithoutContractsInput
    client: ClientsCreateNestedOneWithoutContractsInput
  }

  export type ContractsUncheckedCreateInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    motorcycleId: string
    clientId: string
  }

  export type ContractsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motorcycle?: MotorCycleUpdateOneRequiredWithoutContractsNestedInput
    client?: ClientsUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motorcycleId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractsCreateManyInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    motorcycleId: string
    clientId: string
  }

  export type ContractsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motorcycleId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumStatusMotorcycleFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusMotorcycle | EnumStatusMotorcycleFieldRefInput<$PrismaModel>
    in?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusMotorcycleFilter<$PrismaModel> | $Enums.StatusMotorcycle
  }

  export type ContractsListRelationFilter = {
    every?: ContractsWhereInput
    some?: ContractsWhereInput
    none?: ContractsWhereInput
  }

  export type ContractsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MotorCycleCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    placa?: SortOrder
    ano?: SortOrder
    chassi?: SortOrder
    renavam?: SortOrder
    km?: SortOrder
    valor_compra?: SortOrder
    valor_venda?: SortOrder
    valor_fipe?: SortOrder
    observacao?: SortOrder
    foto1?: SortOrder
    foto2?: SortOrder
    foto3?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MotorCycleAvgOrderByAggregateInput = {
    valor_compra?: SortOrder
    valor_venda?: SortOrder
    valor_fipe?: SortOrder
  }

  export type MotorCycleMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    placa?: SortOrder
    ano?: SortOrder
    chassi?: SortOrder
    renavam?: SortOrder
    km?: SortOrder
    valor_compra?: SortOrder
    valor_venda?: SortOrder
    valor_fipe?: SortOrder
    observacao?: SortOrder
    foto1?: SortOrder
    foto2?: SortOrder
    foto3?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MotorCycleMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    cor?: SortOrder
    placa?: SortOrder
    ano?: SortOrder
    chassi?: SortOrder
    renavam?: SortOrder
    km?: SortOrder
    valor_compra?: SortOrder
    valor_venda?: SortOrder
    valor_fipe?: SortOrder
    observacao?: SortOrder
    foto1?: SortOrder
    foto2?: SortOrder
    foto3?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MotorCycleSumOrderByAggregateInput = {
    valor_compra?: SortOrder
    valor_venda?: SortOrder
    valor_fipe?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumStatusMotorcycleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusMotorcycle | EnumStatusMotorcycleFieldRefInput<$PrismaModel>
    in?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusMotorcycleWithAggregatesFilter<$PrismaModel> | $Enums.StatusMotorcycle
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusMotorcycleFilter<$PrismaModel>
    _max?: NestedEnumStatusMotorcycleFilter<$PrismaModel>
  }

  export type EnumTipoClienteFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCliente | EnumTipoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoClienteFilter<$PrismaModel> | $Enums.TipoCliente
  }

  export type EnumStatusClientFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusClient | EnumStatusClientFieldRefInput<$PrismaModel>
    in?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusClientFilter<$PrismaModel> | $Enums.StatusClient
  }

  export type ClientsCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    fullName?: SortOrder
    documento?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrder
    companyName?: SortOrder
    cep?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    complementos?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientsMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    fullName?: SortOrder
    documento?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrder
    companyName?: SortOrder
    cep?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    complementos?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientsMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    fullName?: SortOrder
    documento?: SortOrder
    telefone?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrder
    companyName?: SortOrder
    cep?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    complementos?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EnumTipoClienteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCliente | EnumTipoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoClienteWithAggregatesFilter<$PrismaModel> | $Enums.TipoCliente
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoClienteFilter<$PrismaModel>
    _max?: NestedEnumTipoClienteFilter<$PrismaModel>
  }

  export type EnumStatusClientWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusClient | EnumStatusClientFieldRefInput<$PrismaModel>
    in?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusClientWithAggregatesFilter<$PrismaModel> | $Enums.StatusClient
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusClientFilter<$PrismaModel>
    _max?: NestedEnumStatusClientFilter<$PrismaModel>
  }

  export type EnumStatusContratoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusContrato | EnumStatusContratoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusContratoFilter<$PrismaModel> | $Enums.StatusContrato
  }

  export type EnumPagamentoFilter<$PrismaModel = never> = {
    equals?: $Enums.Pagamento | EnumPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumPagamentoFilter<$PrismaModel> | $Enums.Pagamento
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MotorCycleScalarRelationFilter = {
    is?: MotorCycleWhereInput
    isNot?: MotorCycleWhereInput
  }

  export type ClientsScalarRelationFilter = {
    is?: ClientsWhereInput
    isNot?: ClientsWhereInput
  }

  export type ContractsCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    data?: SortOrder
    status?: SortOrder
    observacao?: SortOrder
    pagamento?: SortOrder
    contractoPdf?: SortOrder
    signatures?: SortOrder
    signatureToken?: SortOrder
    signatureTokenExpiry?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    motorcycleId?: SortOrder
    clientId?: SortOrder
  }

  export type ContractsAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type ContractsMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    data?: SortOrder
    status?: SortOrder
    observacao?: SortOrder
    pagamento?: SortOrder
    contractoPdf?: SortOrder
    signatureToken?: SortOrder
    signatureTokenExpiry?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    motorcycleId?: SortOrder
    clientId?: SortOrder
  }

  export type ContractsMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    data?: SortOrder
    status?: SortOrder
    observacao?: SortOrder
    pagamento?: SortOrder
    contractoPdf?: SortOrder
    signatureToken?: SortOrder
    signatureTokenExpiry?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    motorcycleId?: SortOrder
    clientId?: SortOrder
  }

  export type ContractsSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type EnumStatusContratoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusContrato | EnumStatusContratoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusContratoWithAggregatesFilter<$PrismaModel> | $Enums.StatusContrato
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusContratoFilter<$PrismaModel>
    _max?: NestedEnumStatusContratoFilter<$PrismaModel>
  }

  export type EnumPagamentoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Pagamento | EnumPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumPagamentoWithAggregatesFilter<$PrismaModel> | $Enums.Pagamento
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPagamentoFilter<$PrismaModel>
    _max?: NestedEnumPagamentoFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ContractsCreateNestedManyWithoutMotorcycleInput = {
    create?: XOR<ContractsCreateWithoutMotorcycleInput, ContractsUncheckedCreateWithoutMotorcycleInput> | ContractsCreateWithoutMotorcycleInput[] | ContractsUncheckedCreateWithoutMotorcycleInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutMotorcycleInput | ContractsCreateOrConnectWithoutMotorcycleInput[]
    createMany?: ContractsCreateManyMotorcycleInputEnvelope
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
  }

  export type ContractsUncheckedCreateNestedManyWithoutMotorcycleInput = {
    create?: XOR<ContractsCreateWithoutMotorcycleInput, ContractsUncheckedCreateWithoutMotorcycleInput> | ContractsCreateWithoutMotorcycleInput[] | ContractsUncheckedCreateWithoutMotorcycleInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutMotorcycleInput | ContractsCreateOrConnectWithoutMotorcycleInput[]
    createMany?: ContractsCreateManyMotorcycleInputEnvelope
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumStatusMotorcycleFieldUpdateOperationsInput = {
    set?: $Enums.StatusMotorcycle
  }

  export type ContractsUpdateManyWithoutMotorcycleNestedInput = {
    create?: XOR<ContractsCreateWithoutMotorcycleInput, ContractsUncheckedCreateWithoutMotorcycleInput> | ContractsCreateWithoutMotorcycleInput[] | ContractsUncheckedCreateWithoutMotorcycleInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutMotorcycleInput | ContractsCreateOrConnectWithoutMotorcycleInput[]
    upsert?: ContractsUpsertWithWhereUniqueWithoutMotorcycleInput | ContractsUpsertWithWhereUniqueWithoutMotorcycleInput[]
    createMany?: ContractsCreateManyMotorcycleInputEnvelope
    set?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    disconnect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    delete?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    update?: ContractsUpdateWithWhereUniqueWithoutMotorcycleInput | ContractsUpdateWithWhereUniqueWithoutMotorcycleInput[]
    updateMany?: ContractsUpdateManyWithWhereWithoutMotorcycleInput | ContractsUpdateManyWithWhereWithoutMotorcycleInput[]
    deleteMany?: ContractsScalarWhereInput | ContractsScalarWhereInput[]
  }

  export type ContractsUncheckedUpdateManyWithoutMotorcycleNestedInput = {
    create?: XOR<ContractsCreateWithoutMotorcycleInput, ContractsUncheckedCreateWithoutMotorcycleInput> | ContractsCreateWithoutMotorcycleInput[] | ContractsUncheckedCreateWithoutMotorcycleInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutMotorcycleInput | ContractsCreateOrConnectWithoutMotorcycleInput[]
    upsert?: ContractsUpsertWithWhereUniqueWithoutMotorcycleInput | ContractsUpsertWithWhereUniqueWithoutMotorcycleInput[]
    createMany?: ContractsCreateManyMotorcycleInputEnvelope
    set?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    disconnect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    delete?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    update?: ContractsUpdateWithWhereUniqueWithoutMotorcycleInput | ContractsUpdateWithWhereUniqueWithoutMotorcycleInput[]
    updateMany?: ContractsUpdateManyWithWhereWithoutMotorcycleInput | ContractsUpdateManyWithWhereWithoutMotorcycleInput[]
    deleteMany?: ContractsScalarWhereInput | ContractsScalarWhereInput[]
  }

  export type ContractsCreateNestedManyWithoutClientInput = {
    create?: XOR<ContractsCreateWithoutClientInput, ContractsUncheckedCreateWithoutClientInput> | ContractsCreateWithoutClientInput[] | ContractsUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutClientInput | ContractsCreateOrConnectWithoutClientInput[]
    createMany?: ContractsCreateManyClientInputEnvelope
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
  }

  export type ContractsUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ContractsCreateWithoutClientInput, ContractsUncheckedCreateWithoutClientInput> | ContractsCreateWithoutClientInput[] | ContractsUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutClientInput | ContractsCreateOrConnectWithoutClientInput[]
    createMany?: ContractsCreateManyClientInputEnvelope
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
  }

  export type EnumTipoClienteFieldUpdateOperationsInput = {
    set?: $Enums.TipoCliente
  }

  export type EnumStatusClientFieldUpdateOperationsInput = {
    set?: $Enums.StatusClient
  }

  export type ContractsUpdateManyWithoutClientNestedInput = {
    create?: XOR<ContractsCreateWithoutClientInput, ContractsUncheckedCreateWithoutClientInput> | ContractsCreateWithoutClientInput[] | ContractsUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutClientInput | ContractsCreateOrConnectWithoutClientInput[]
    upsert?: ContractsUpsertWithWhereUniqueWithoutClientInput | ContractsUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ContractsCreateManyClientInputEnvelope
    set?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    disconnect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    delete?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    update?: ContractsUpdateWithWhereUniqueWithoutClientInput | ContractsUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ContractsUpdateManyWithWhereWithoutClientInput | ContractsUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ContractsScalarWhereInput | ContractsScalarWhereInput[]
  }

  export type ContractsUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ContractsCreateWithoutClientInput, ContractsUncheckedCreateWithoutClientInput> | ContractsCreateWithoutClientInput[] | ContractsUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractsCreateOrConnectWithoutClientInput | ContractsCreateOrConnectWithoutClientInput[]
    upsert?: ContractsUpsertWithWhereUniqueWithoutClientInput | ContractsUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ContractsCreateManyClientInputEnvelope
    set?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    disconnect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    delete?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    connect?: ContractsWhereUniqueInput | ContractsWhereUniqueInput[]
    update?: ContractsUpdateWithWhereUniqueWithoutClientInput | ContractsUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ContractsUpdateManyWithWhereWithoutClientInput | ContractsUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ContractsScalarWhereInput | ContractsScalarWhereInput[]
  }

  export type MotorCycleCreateNestedOneWithoutContractsInput = {
    create?: XOR<MotorCycleCreateWithoutContractsInput, MotorCycleUncheckedCreateWithoutContractsInput>
    connectOrCreate?: MotorCycleCreateOrConnectWithoutContractsInput
    connect?: MotorCycleWhereUniqueInput
  }

  export type ClientsCreateNestedOneWithoutContractsInput = {
    create?: XOR<ClientsCreateWithoutContractsInput, ClientsUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutContractsInput
    connect?: ClientsWhereUniqueInput
  }

  export type EnumStatusContratoFieldUpdateOperationsInput = {
    set?: $Enums.StatusContrato
  }

  export type EnumPagamentoFieldUpdateOperationsInput = {
    set?: $Enums.Pagamento
  }

  export type MotorCycleUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<MotorCycleCreateWithoutContractsInput, MotorCycleUncheckedCreateWithoutContractsInput>
    connectOrCreate?: MotorCycleCreateOrConnectWithoutContractsInput
    upsert?: MotorCycleUpsertWithoutContractsInput
    connect?: MotorCycleWhereUniqueInput
    update?: XOR<XOR<MotorCycleUpdateToOneWithWhereWithoutContractsInput, MotorCycleUpdateWithoutContractsInput>, MotorCycleUncheckedUpdateWithoutContractsInput>
  }

  export type ClientsUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<ClientsCreateWithoutContractsInput, ClientsUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutContractsInput
    upsert?: ClientsUpsertWithoutContractsInput
    connect?: ClientsWhereUniqueInput
    update?: XOR<XOR<ClientsUpdateToOneWithWhereWithoutContractsInput, ClientsUpdateWithoutContractsInput>, ClientsUncheckedUpdateWithoutContractsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumStatusMotorcycleFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusMotorcycle | EnumStatusMotorcycleFieldRefInput<$PrismaModel>
    in?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusMotorcycleFilter<$PrismaModel> | $Enums.StatusMotorcycle
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusMotorcycleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusMotorcycle | EnumStatusMotorcycleFieldRefInput<$PrismaModel>
    in?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusMotorcycle[] | ListEnumStatusMotorcycleFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusMotorcycleWithAggregatesFilter<$PrismaModel> | $Enums.StatusMotorcycle
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusMotorcycleFilter<$PrismaModel>
    _max?: NestedEnumStatusMotorcycleFilter<$PrismaModel>
  }

  export type NestedEnumTipoClienteFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCliente | EnumTipoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoClienteFilter<$PrismaModel> | $Enums.TipoCliente
  }

  export type NestedEnumStatusClientFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusClient | EnumStatusClientFieldRefInput<$PrismaModel>
    in?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusClientFilter<$PrismaModel> | $Enums.StatusClient
  }

  export type NestedEnumTipoClienteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCliente | EnumTipoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCliente[] | ListEnumTipoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoClienteWithAggregatesFilter<$PrismaModel> | $Enums.TipoCliente
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoClienteFilter<$PrismaModel>
    _max?: NestedEnumTipoClienteFilter<$PrismaModel>
  }

  export type NestedEnumStatusClientWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusClient | EnumStatusClientFieldRefInput<$PrismaModel>
    in?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusClient[] | ListEnumStatusClientFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusClientWithAggregatesFilter<$PrismaModel> | $Enums.StatusClient
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusClientFilter<$PrismaModel>
    _max?: NestedEnumStatusClientFilter<$PrismaModel>
  }

  export type NestedEnumStatusContratoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusContrato | EnumStatusContratoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusContratoFilter<$PrismaModel> | $Enums.StatusContrato
  }

  export type NestedEnumPagamentoFilter<$PrismaModel = never> = {
    equals?: $Enums.Pagamento | EnumPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumPagamentoFilter<$PrismaModel> | $Enums.Pagamento
  }

  export type NestedEnumStatusContratoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusContrato | EnumStatusContratoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusContrato[] | ListEnumStatusContratoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusContratoWithAggregatesFilter<$PrismaModel> | $Enums.StatusContrato
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusContratoFilter<$PrismaModel>
    _max?: NestedEnumStatusContratoFilter<$PrismaModel>
  }

  export type NestedEnumPagamentoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Pagamento | EnumPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Pagamento[] | ListEnumPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumPagamentoWithAggregatesFilter<$PrismaModel> | $Enums.Pagamento
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPagamentoFilter<$PrismaModel>
    _max?: NestedEnumPagamentoFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ContractsCreateWithoutMotorcycleInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    client: ClientsCreateNestedOneWithoutContractsInput
  }

  export type ContractsUncheckedCreateWithoutMotorcycleInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    clientId: string
  }

  export type ContractsCreateOrConnectWithoutMotorcycleInput = {
    where: ContractsWhereUniqueInput
    create: XOR<ContractsCreateWithoutMotorcycleInput, ContractsUncheckedCreateWithoutMotorcycleInput>
  }

  export type ContractsCreateManyMotorcycleInputEnvelope = {
    data: ContractsCreateManyMotorcycleInput | ContractsCreateManyMotorcycleInput[]
    skipDuplicates?: boolean
  }

  export type ContractsUpsertWithWhereUniqueWithoutMotorcycleInput = {
    where: ContractsWhereUniqueInput
    update: XOR<ContractsUpdateWithoutMotorcycleInput, ContractsUncheckedUpdateWithoutMotorcycleInput>
    create: XOR<ContractsCreateWithoutMotorcycleInput, ContractsUncheckedCreateWithoutMotorcycleInput>
  }

  export type ContractsUpdateWithWhereUniqueWithoutMotorcycleInput = {
    where: ContractsWhereUniqueInput
    data: XOR<ContractsUpdateWithoutMotorcycleInput, ContractsUncheckedUpdateWithoutMotorcycleInput>
  }

  export type ContractsUpdateManyWithWhereWithoutMotorcycleInput = {
    where: ContractsScalarWhereInput
    data: XOR<ContractsUpdateManyMutationInput, ContractsUncheckedUpdateManyWithoutMotorcycleInput>
  }

  export type ContractsScalarWhereInput = {
    AND?: ContractsScalarWhereInput | ContractsScalarWhereInput[]
    OR?: ContractsScalarWhereInput[]
    NOT?: ContractsScalarWhereInput | ContractsScalarWhereInput[]
    id?: StringFilter<"Contracts"> | string
    valor?: IntFilter<"Contracts"> | number
    data?: DateTimeFilter<"Contracts"> | Date | string
    status?: EnumStatusContratoFilter<"Contracts"> | $Enums.StatusContrato
    observacao?: StringNullableFilter<"Contracts"> | string | null
    pagamento?: EnumPagamentoFilter<"Contracts"> | $Enums.Pagamento
    contractoPdf?: StringNullableFilter<"Contracts"> | string | null
    signatures?: JsonNullableFilter<"Contracts">
    signatureToken?: StringNullableFilter<"Contracts"> | string | null
    signatureTokenExpiry?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    created_at?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Contracts"> | Date | string | null
    motorcycleId?: StringFilter<"Contracts"> | string
    clientId?: StringFilter<"Contracts"> | string
  }

  export type ContractsCreateWithoutClientInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    motorcycle: MotorCycleCreateNestedOneWithoutContractsInput
  }

  export type ContractsUncheckedCreateWithoutClientInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    motorcycleId: string
  }

  export type ContractsCreateOrConnectWithoutClientInput = {
    where: ContractsWhereUniqueInput
    create: XOR<ContractsCreateWithoutClientInput, ContractsUncheckedCreateWithoutClientInput>
  }

  export type ContractsCreateManyClientInputEnvelope = {
    data: ContractsCreateManyClientInput | ContractsCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ContractsUpsertWithWhereUniqueWithoutClientInput = {
    where: ContractsWhereUniqueInput
    update: XOR<ContractsUpdateWithoutClientInput, ContractsUncheckedUpdateWithoutClientInput>
    create: XOR<ContractsCreateWithoutClientInput, ContractsUncheckedCreateWithoutClientInput>
  }

  export type ContractsUpdateWithWhereUniqueWithoutClientInput = {
    where: ContractsWhereUniqueInput
    data: XOR<ContractsUpdateWithoutClientInput, ContractsUncheckedUpdateWithoutClientInput>
  }

  export type ContractsUpdateManyWithWhereWithoutClientInput = {
    where: ContractsScalarWhereInput
    data: XOR<ContractsUpdateManyMutationInput, ContractsUncheckedUpdateManyWithoutClientInput>
  }

  export type MotorCycleCreateWithoutContractsInput = {
    id?: string
    nome: string
    cor: string
    placa: string
    ano: Date | string
    chassi: string
    renavam: string
    km: string
    valor_compra: number
    valor_venda: number
    valor_fipe: number
    observacao?: string | null
    foto1?: string | null
    foto2?: string | null
    foto3?: string | null
    status?: $Enums.StatusMotorcycle
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type MotorCycleUncheckedCreateWithoutContractsInput = {
    id?: string
    nome: string
    cor: string
    placa: string
    ano: Date | string
    chassi: string
    renavam: string
    km: string
    valor_compra: number
    valor_venda: number
    valor_fipe: number
    observacao?: string | null
    foto1?: string | null
    foto2?: string | null
    foto3?: string | null
    status?: $Enums.StatusMotorcycle
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type MotorCycleCreateOrConnectWithoutContractsInput = {
    where: MotorCycleWhereUniqueInput
    create: XOR<MotorCycleCreateWithoutContractsInput, MotorCycleUncheckedCreateWithoutContractsInput>
  }

  export type ClientsCreateWithoutContractsInput = {
    id?: string
    tipo: $Enums.TipoCliente
    fullName: string
    documento: string
    telefone?: string | null
    email: string
    dataNascimento?: Date | string | null
    companyName?: string | null
    cep: string
    rua: string
    numero: string
    bairro: string
    cidade: string
    estado: string
    complementos?: string | null
    status?: $Enums.StatusClient
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ClientsUncheckedCreateWithoutContractsInput = {
    id?: string
    tipo: $Enums.TipoCliente
    fullName: string
    documento: string
    telefone?: string | null
    email: string
    dataNascimento?: Date | string | null
    companyName?: string | null
    cep: string
    rua: string
    numero: string
    bairro: string
    cidade: string
    estado: string
    complementos?: string | null
    status?: $Enums.StatusClient
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ClientsCreateOrConnectWithoutContractsInput = {
    where: ClientsWhereUniqueInput
    create: XOR<ClientsCreateWithoutContractsInput, ClientsUncheckedCreateWithoutContractsInput>
  }

  export type MotorCycleUpsertWithoutContractsInput = {
    update: XOR<MotorCycleUpdateWithoutContractsInput, MotorCycleUncheckedUpdateWithoutContractsInput>
    create: XOR<MotorCycleCreateWithoutContractsInput, MotorCycleUncheckedCreateWithoutContractsInput>
    where?: MotorCycleWhereInput
  }

  export type MotorCycleUpdateToOneWithWhereWithoutContractsInput = {
    where?: MotorCycleWhereInput
    data: XOR<MotorCycleUpdateWithoutContractsInput, MotorCycleUncheckedUpdateWithoutContractsInput>
  }

  export type MotorCycleUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    chassi?: StringFieldUpdateOperationsInput | string
    renavam?: StringFieldUpdateOperationsInput | string
    km?: StringFieldUpdateOperationsInput | string
    valor_compra?: IntFieldUpdateOperationsInput | number
    valor_venda?: IntFieldUpdateOperationsInput | number
    valor_fipe?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    foto1?: NullableStringFieldUpdateOperationsInput | string | null
    foto2?: NullableStringFieldUpdateOperationsInput | string | null
    foto3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusMotorcycleFieldUpdateOperationsInput | $Enums.StatusMotorcycle
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MotorCycleUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    cor?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    ano?: DateTimeFieldUpdateOperationsInput | Date | string
    chassi?: StringFieldUpdateOperationsInput | string
    renavam?: StringFieldUpdateOperationsInput | string
    km?: StringFieldUpdateOperationsInput | string
    valor_compra?: IntFieldUpdateOperationsInput | number
    valor_venda?: IntFieldUpdateOperationsInput | number
    valor_fipe?: IntFieldUpdateOperationsInput | number
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    foto1?: NullableStringFieldUpdateOperationsInput | string | null
    foto2?: NullableStringFieldUpdateOperationsInput | string | null
    foto3?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusMotorcycleFieldUpdateOperationsInput | $Enums.StatusMotorcycle
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientsUpsertWithoutContractsInput = {
    update: XOR<ClientsUpdateWithoutContractsInput, ClientsUncheckedUpdateWithoutContractsInput>
    create: XOR<ClientsCreateWithoutContractsInput, ClientsUncheckedCreateWithoutContractsInput>
    where?: ClientsWhereInput
  }

  export type ClientsUpdateToOneWithWhereWithoutContractsInput = {
    where?: ClientsWhereInput
    data: XOR<ClientsUpdateWithoutContractsInput, ClientsUncheckedUpdateWithoutContractsInput>
  }

  export type ClientsUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoClienteFieldUpdateOperationsInput | $Enums.TipoCliente
    fullName?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    complementos?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusClientFieldUpdateOperationsInput | $Enums.StatusClient
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientsUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoClienteFieldUpdateOperationsInput | $Enums.TipoCliente
    fullName?: StringFieldUpdateOperationsInput | string
    documento?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    complementos?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusClientFieldUpdateOperationsInput | $Enums.StatusClient
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractsCreateManyMotorcycleInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    clientId: string
  }

  export type ContractsUpdateWithoutMotorcycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    client?: ClientsUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractsUncheckedUpdateWithoutMotorcycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractsUncheckedUpdateManyWithoutMotorcycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractsCreateManyClientInput = {
    id?: string
    valor: number
    data?: Date | string
    status?: $Enums.StatusContrato
    observacao?: string | null
    pagamento: $Enums.Pagamento
    contractoPdf?: string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: string | null
    signatureTokenExpiry?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    motorcycleId: string
  }

  export type ContractsUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motorcycle?: MotorCycleUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractsUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motorcycleId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractsUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusContratoFieldUpdateOperationsInput | $Enums.StatusContrato
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    pagamento?: EnumPagamentoFieldUpdateOperationsInput | $Enums.Pagamento
    contractoPdf?: NullableStringFieldUpdateOperationsInput | string | null
    signatures?: NullableJsonNullValueInput | InputJsonValue
    signatureToken?: NullableStringFieldUpdateOperationsInput | string | null
    signatureTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motorcycleId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}